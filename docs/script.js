// Generated by Haxe 4.3.0
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ColStagBoards = function() { };
ColStagBoards.__name__ = true;
ColStagBoards.init = function(keyboards) {
	var add = function(kb) {
		kb.stagger = kb.stagger != null ? kb.stagger : type_StaggerType.Column;
		kb.shape = kb.shape != null ? kb.shape : type_ValList.fromValue(type_Shape.Split);
		keyboards.push(kb);
	};
	var pimoroniSize = 4.4;
	var kb = { name : "Corne/crkbd"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(42),type_NumRange.fromInt(6),type_NumRange.fromInt(3));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(3));
	ColStagKeyboard.setHotswap(kb,[type_SwitchProfile.MX,type_SwitchProfile.Choc]);
	kb.displays = type_NumRange.fromArray([0,2]);
	kb.source = type_ValList.fromValue("https://github.com/foostan/crkbd");
	kb.kit = ["https://splitkb.com/collections/keyboard-kits/products/aurora-corne","https://holykeebs.com","https://new.boardsource.xyz/products/unicorne","https://nextkeyboard.club/product-tag/corne-v3-0-1-mx/","https://customkbd.com/collections/split-keyboards/products/corne-classic-kit","https://42keebs.eu/shop/kits/pro-micro-based/corne-chocolate-low-profile-hotswap-split-ergo-40-kit/","https://www.diykeyboards.com/keyboards/keyboard-kits/product/corne-keyboard-kit","https://keebd.com/products/corne-cherry-v3-rgb-keyboard-kit","https://keebd.com/products/corne-choc-low-profile-rgb-keyboard-kit","https://keyhive.xyz/shop/corne-v3","https://mechboards.co.uk/collections/kits/products/helidox-corne-kit","https://shop.yushakobo.jp/en/products/corne-chocolate","https://www.littlekeyboards.com/collections/corne-pcb-kits","https://keebmaker.com/collections/kits","[US] https://www.etsy.com/listing/1113750577/corne-light-v2-pcb"];
	kb.prebuilt = ["https://customkbd.com/collections/split-keyboards/products/corne-classic-kit"];
	kb.extras = ["https://keyhive.xyz/shop/aluminum-corne-helidox-case"];
	kb.img = type_ValList.fromValue("crkbd.jpg");
	add(kb);
	var addSofle = function(kb) {
		kb.keys = kb.keys != null ? kb.keys : type_NumRange.fromInt(58);
		kb.cols = type_NumRange.fromInt(6);
		kb.rows = type_NumRange.fromInt(4);
		ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(5));
		kb.encoders = kb.encoders != null ? kb.encoders : type_NumRange.fromInt(2);
		kb.displays = kb.displays != null ? kb.displays : type_NumRange.fromArray([0,2]);
		ColStagKeyboard.setQMK(kb,[type_Software.VIA,type_Software.Vial]);
		add(kb);
	};
	kb = { name : "Sofle"};
	ColStagKeyboard.setHotswap(kb,[type_SwitchProfile.MX,type_SwitchProfile.Choc]);
	kb.caseType = [type_CaseType.Included,type_CaseType.ThirdParty];
	kb.web = type_ValList.fromValue("https://josefadamcik.github.io/SofleKeyboard/");
	kb.source = type_ValList.fromValue("https://github.com/josefadamcik/SofleKeyboard");
	kb.kit = ["https://keebd.com/en-us/products/sofle-v2-keyboard-kit","https://splitkb.com/collections/keyboard-kits/products/aurora-sofle-v2?variant=46912405635419","https://mechboards.co.uk/collections/kits/products/sofle-kit","https://customkbd.com/collections/split-keyboards","https://42keebs.eu/shop/kits/pro-micro-based/sofle-v2-hotswap-split-ergo-50-kit-black/","https://keebd.com/products/sofle-v2-1-rgb-keyboard-kit","https://keebd.com/products/sofle-v2-1-choc-keyboard-kit","https://www.littlekeyboards.com/products/sofle-rgb-pcb-kit","https://keebmaker.com/collections/kits"];
	kb.prebuilt = ["https://falba.tech/https-falba-tech-buy-a-custom-keyboard-sofle/","https://shop.beekeeb.com/product/pre-soldered-sofle-rgb-mx/","https://ergomech.store/shop?search=&order=&attrib=&attrib=&attrib=&attrib=&attrib=11-22&attrib="];
	kb.extras = ["https://shop.beekeeb.com/product/sofle-2-tented-case/"];
	kb.img = type_ValList.fromValue("sofle.jpg");
	addSofle(kb);
	kb = { name : "Sofle Choc"};
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc),type_KeySpacing.MX);
	kb.caseType = [type_CaseType.Included,type_CaseType.ThirdParty];
	kb.web = type_ValList.fromValue("https://josefadamcik.github.io/SofleKeyboard/");
	kb.source = type_ValList.fromValue("https://github.com/josefadamcik/SofleKeyboard");
	kb.kit = ["https://42keebs.eu/shop/kits/pro-micro-based/sofle-choc-hotswap-split-ergo-50-kit-black/","https://splitkb.com/collections/keyboard-kits/products/aurora-sofle-v2?variant=46912405668187","https://www.littlekeyboards.com/products/sofle-choc-pcb-kit"];
	kb.prebuilt = ["https://falba.tech/sofle-low-profile/","https://ergomech.store/shop/sofle-choc-ergomech-store-revision-47"];
	kb.img = type_ValList.fromValue("sofle-choc.jpg");
	kb.pinkyStagger = 0.3;
	addSofle(kb);
	kb = { name : "Sofle PLUS (xcmkb)"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(58),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(5));
	kb.displays = type_NumRange.fromInt(2);
	kb.encoders = type_NumRange.fromInt(2);
	kb.encoderType = [type_EncoderType.Knob,type_EncoderType.Wheel];
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	kb.trackballs = type_NumRange.fromInt(1);
	kb.trackballSize = pimoroniSize;
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.web = type_ValList.fromValue("https://github.com/superxc3/xcmkb/tree/main/list%20of%20items/list%20of%20keyboards/60percent/sofle/sofleplus");
	kb.prebuilt = type_ValList.fromValue("!https://github.com/superxc3/xcmkb");
	kb.img = type_ValList.fromValue("xcmkb-sofle-plus.jpg");
	kb.notes = type_ValList.fromValue("A number of small improvements over regular Sofle.");
	add(kb);
	kb = { name : "Soufflé", pinkyStagger : 0.7, encoders : type_NumRange.fromArray([1,2]), source : type_ValList.fromValue("https://github.com/climent/SouffleKeyboard"), img : type_ValList.fromValue("Soufflé.jpg")};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromArray([58,59]),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(5),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromInt(1));
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	ColStagKeyboard.setQMK(kb,[type_Software.VIA,type_Software.Vial]);
	add(kb);
	kb = { name : "Lily58", source : type_ValList.fromValue("https://github.com/kata0510/Lily58"), kit : ["!https://shop.yushakobo.jp/products/lily58-pro/","https://mechboards.co.uk/collections/kits/products/lily58-kit","https://splitkb.com/collections/keyboard-kits/products/aurora-lily58","https://holykeebs.com/products/trackball-lily58-low-profile","https://www.boardsource.xyz/products/lulu","https://42keebs.eu/shop/kits/pro-micro-based/lily58-pro-hotswap-split-ergo-50-kit-black-white/","https://customkbd.com/collections/split-keyboards/products/lily-58-pro-keyboard-kit","https://keebd.com/products/lily58-pro-keyboard-kit","https://www.littlekeyboards.com/collections/lily58-pcb-kits","https://keyhive.xyz/shop/lily58"], prebuilt : ["https://customkbd.com/collections/split-keyboards/products/lily-58-pro-keyboard-kit","https://ergomech.store/shop/sofle-v2-sandwich-style-12","https://ergomech.store/shop/lily58-enclose-case-15"], extras : ["[US] https://capsuledeluxe.com/tag/manta58/"], img : type_ValList.fromValue("lily58.jpg")};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(58),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(4),type_NumRange.fromInt(1),type_NumRange.fromInt(0),type_NumRange.fromInt(0));
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	ColStagKeyboard.setHotswap(kb,[type_SwitchProfile.MX,type_SwitchProfile.Choc],type_KeySpacing.MX);
	add(kb);
	kb = { name : "Kyria"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(48),type_NumRange.fromInt(6),type_NumRange.fromInt(3));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(6));
	ColStagKeyboard.setHotswap(kb,[type_SwitchProfile.MX,type_SwitchProfile.Choc]);
	kb.encoders = type_NumRange.fromInt(2);
	kb.pinkyStagger = 0.6;
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.source = type_ValList.fromValue("https://github.com/splitkb/kyria");
	kb.kit = type_ValList.fromValue("!https://splitkb.com/products/kyria-rev3-pcb-kit");
	kb.img = type_ValList.fromValue("Kyria.jpg");
	add(kb);
	var addEgg = function(kb) {
		ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(58),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
		kb.thumbKeys = type_NumRange.fromInt(4);
		kb.cornerKeys = type_NumRange.fromInt(4);
		kb.hotswap = type_ValList.fromValue(type_HotSwap.Yes);
		kb.caseType = type_ValList.fromValue(type_CaseType.Included);
		add(kb);
	};
	addEgg({ name : "Egg58", switchProfile : type_ValList.fromValue(type_SwitchProfile.Choc), connection : type_ValList.fromValue(type_Connection.Wired), firmware : type_ValList.fromValue(type_Firmware.QMK), software : type_ValList.fromValue(type_Software.VIA), source : type_ValList.fromValue("https://github.com/eggsworks/egg58"), kit : type_ValList.fromValue("!https://eggs.works/products/egg58-diy-kit"), prebuilt : type_ValList.fromValue("!https://eggs.works/products/egg58"), img : type_ValList.fromValue("egg58.jpg")});
	addEgg({ name : "Egg58bt", switchProfile : type_ValList.fromValue(type_SwitchProfile.Choc), connection : type_ValList.fromValue(type_Connection.Bluetooth), firmware : type_ValList.fromValue(type_Firmware.ZMK), source : type_ValList.fromValue("https://github.com/eggsworks/egg58/blob/master/egg58bt"), img : type_ValList.fromValue("egg58bt.jpg")});
	kb = { name : "Eskarp", assembly : type_ValList.fromValue(type_Assembly.Handwired), switchProfile : type_ValList.fromValue(type_SwitchProfile.MX), firmware : type_ValList.fromValue(type_Firmware.Custom), trackpads : type_NumRange.fromArray([0,1]), source : type_ValList.fromValue("https://github.com/rwalkr/eskarp"), img : type_ValList.fromValue("eskarp.jpg")};
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(60),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(6),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromInt(5));
	add(kb);
	kb = { name : "Pangaea", assembly : type_ValList.fromValue(type_Assembly.Adjustable), encoders : type_NumRange.fromArray([0,2]), source : type_ValList.fromValue("https://github.com/e3w2q/Pangaea-keyboard"), img : type_ValList.fromValue("Pangaea.jpg"), notes : type_ValList.fromValue("Pinky columns and thumb row can be moved and rotated.")};
	kb.splay = type_SplayBase.Optional;
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromArray([58,60]),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(5));
	add(kb);
	kb = { name : "Mask", thumbKeys : type_NumRange.fromInt(6), switchProfile : type_ValList.fromValue(type_SwitchProfile.CherryULP), source : type_ValList.fromValue("https://github.com/marcoster/mask"), img : type_ValList.fromValue("mask-ulp.webp")};
	kb.caseType = type_ValList.fromValue(type_CaseType.None);
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(60),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	add(kb);
	kb = { name : "Dao Choc BLE", thumbKeys : type_NumRange.fromArray([2,3]), connection : [type_Connection.Wired,type_Connection.Bluetooth], source : type_ValList.fromValue("https://github.com/yumagulovrn/dao-choc-ble"), prebuilt : type_ValList.fromValue("https://shop.beekeeb.com/product/pre-soldered-wireless-dao-choc-ble-keyboard/"), img : type_ValList.fromValue("dao-choc-ble.jfif")};
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromArray([42,44]),type_NumRange.fromInt(6),type_NumRange.fromInt(3));
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc),type_KeySpacing.Choc);
	add(kb);
	kb = { name : "Cantaloupe", thumbKeys : type_NumRange.fromInt(3), cornerKeys : type_NumRange.fromInt(3), encoders : type_NumRange.fromInt(2), source : type_ValList.fromValue("https://github.com/Ariamelon/Cantaloupe"), img : type_ValList.fromValue("Cantaloupe.jpg")};
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(60),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setQMK(kb);
	add(kb);
	kb = { name : "Untitled keyboard", thumbKeys : type_NumRange.fromInt(5), connection : [type_Connection.Wired,type_Connection.Bluetooth], source : type_ValList.fromValue("https://github.com/AnthonyAmanse/untitled-keyboard/"), firmware : type_ValList.fromValue(type_Firmware.ZMK), img : type_ValList.fromValue("AnthonyAmanse-untitled.jpg")};
	kb.caseType = type_ValList.fromValue(type_CaseType.None);
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(60),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc),type_KeySpacing.Choc);
	add(kb);
	kb = { name : "Pinky4", thumbKeys : type_NumRange.fromInt(4), source : type_ValList.fromValue("https://github.com/tamanishi/Pinky4"), img : type_ValList.fromValue("Pinky4.jpg"), kit : type_ValList.fromValue("https://www.littlekeyboards.com/products/pinky4-keyboard-kit"), extras : type_ValList.fromValue("https://www.littlekeyboards.com/collections/pinky4-cases"), notes : type_ValList.fromValue("Uses Choc switches for thumb keys")};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(64),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	kb.innerKeys = type_NumRange.fromInt(4);
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	add(kb);
	var addAvalanche = function(kb) {
		kb.outerKeys = type_NumRange.fromArray([0,1]);
		kb.thumbKeys = type_NumRange.fromArray([6,7]);
		kb.encoders = type_NumRange.fromArray([0,2]);
		kb.source = type_ValList.fromValue("https://github.com/vlkv/avalanche");
		kb.img = type_ValList.fromValue("avalanche_v4-1.jpg");
		kb.displays = type_NumRange.fromInt(2);
		kb.splay = type_SplayBase.PinkyOnly;
		kb.caseType = type_ValList.fromValue(type_CaseType.Included);
		ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
		ColStagKeyboard.setQMK(kb);
		add(kb);
	};
	addAvalanche({ name : "Avalanche 40%", keys : type_NumRange.fromArray([48,52]), rows : type_NumRange.fromInt(3), cols : type_NumRange.fromInt(6)});
	addAvalanche({ name : "Avalanche 60%", keys : type_NumRange.fromArray([60,64]), rows : type_NumRange.fromInt(4), cols : type_NumRange.fromInt(6), prebuilt : ["https://github.com/superxc3/xcmkb/tree/main/list%20of%20items/list%20of%20keyboards/60percent/avalanche/v4 @ https://github.com/superxc3/xcmkb"]});
	kb = { name : "Redox", source : type_ValList.fromValue("https://github.com/mattdibi/redox-keyboard"), connection : [type_Connection.Wired,type_Connection.Bluetooth], img : type_ValList.fromValue("redox-1.jpg")};
	kb.prebuilt = ["https://falba.tech/custom-redox-v9b7d173b068d/","https://ergomech.store/shop/neodox-52"];
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(70),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(7),type_NumRange.fromInt(2),type_NumRange.fromInt(0),type_NumRange.fromInt(4));
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.firmware = [type_Firmware.QMK,type_Firmware.ZMK];
	kb.software = type_ValList.fromValue(type_Software.VIA);
	add(kb);
	kb = { name : "Redox", source : type_ValList.fromValue("https://github.com/mattdibi/redox-keyboard"), connection : [type_Connection.Wired,type_Connection.Bluetooth], img : type_ValList.fromValue("redox-1.jpg")};
	kb.name += " handwire";
	kb.assembly = type_ValList.fromValue(type_Assembly.Handwired);
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(70),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(7),type_NumRange.fromInt(2),type_NumRange.fromInt(0),type_NumRange.fromInt(4));
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.firmware = [type_Firmware.QMK,type_Firmware.ZMK];
	kb.software = type_ValList.fromValue(type_Software.VIA);
	add(kb);
	kb = { name : "ErgoDash", source : type_ValList.fromValue("https://github.com/omkbd/ErgoDash"), img : type_ValList.fromValue("Ergodash.jpg")};
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	kb.kit = ["https://keebd.com/products/ergodash-keyboard-kit","https://shop.yushakobo.jp/en/products/ergodash"];
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(70),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromArray([2,4]),type_NumRange.fromInt(3),type_NumRange.fromInt(0),type_NumRange.fromInt(4));
	add(kb);
	kb = { name : "ErgoDash-LP", source : type_ValList.fromValue("https://keypcb.xyz/ErgoDash-LP"), img : type_ValList.fromValue("ErgoDashLP.jpg")};
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc));
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(70),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromArray([2,4]),type_NumRange.fromInt(3),type_NumRange.fromInt(0),type_NumRange.fromInt(4));
	add(kb);
	kb = { name : "ErgoMax", source : type_ValList.fromValue("https://github.com/LouWii/ErgoMax"), img : type_ValList.fromValue("ergomax.jpg")};
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(88),type_NumRange.fromInt(6),type_NumRange.fromInt(5));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(6),type_NumRange.fromInt(4),type_NumRange.fromInt(-1),type_NumRange.fromInt(5));
	ColStagKeyboard.setQMK(kb);
	add(kb);
	kb = { name : "Penguin", source : type_ValList.fromValue("https://github.com/gorbit99/penguin"), img : type_ValList.fromValue("penguin.jpg")};
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc),type_KeySpacing.Choc);
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(70),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(5),type_NumRange.fromInt(2),type_NumRange.fromInt(0),type_NumRange.fromInt(4));
	ColStagKeyboard.setQMK(kb);
	add(kb);
	kb = { name : "Taira", source : type_ValList.fromValue("https://github.com/strayer/taira-keyboard"), connection : [type_Connection.Wired,type_Connection.Bluetooth], firmware : type_ValList.fromValue(type_Firmware.ZMK), img : type_ValList.fromValue("taira-1.0.jpg")};
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc),type_KeySpacing.Choc);
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(66),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromArray([5,6]),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromArray([3,4]));
	add(kb);
	kb = { name : "Breeze", navCluster : type_ValList.fromValue(type_NavCluster.Full), thumbKeys : type_NumRange.fromInt(4), web : type_ValList.fromValue("https://www.afternoonlabs.com/breeze/"), source : type_ValList.fromValue("https://github.com/afternoonlabs/BreezeKeyboard"), kit : type_ValList.fromValue("!https://keeb.io/products/afternoon-labs-breeze-keyboard-kit/?afmc=yal"), img : type_ValList.fromValue("breeze.avif")};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(66),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	kb.rcols = type_NumRange.fromInt(9);
	ColStagKeyboard.setHotswap(kb,[type_SwitchProfile.MX,type_SwitchProfile.Choc],type_KeySpacing.MX);
	ColStagKeyboard.setQMK(kb,type_ValList.fromValue(type_Software.VIA));
	add(kb);
	kb = { name : "ErgoNICE", navCluster : type_ValList.fromValue(type_NavCluster.Arrows), thumbKeys : type_NumRange.fromInt(4), encoders : type_NumRange.fromInt(1), firmware : type_ValList.fromValue(type_Firmware.Custom), web : type_ValList.fromValue("https://val.packett.cool/blog/ergonice/"), source : type_ValList.fromValue("https://codeberg.org/valpackett/ergonice"), img : type_ValList.fromValue("ergoNICE.jpg")};
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(69),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	kb.rcols = type_NumRange.fromInt(7);
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	add(kb);
	kb = { name : "Willow64", thumbKeys : type_NumRange.fromInt(5), source : type_ValList.fromValue("https://github.com/hanachi-ap/willow64-doc"), img : type_ValList.fromValue("Willow64.jpg")};
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(64),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	kb.rcols = type_NumRange.fromInt(8);
	kb.splay = type_SplayBase.Yes;
	ColStagKeyboard.setQMK(kb,type_ValList.fromValue(type_Software.VIA));
	add(kb);
	kb = { name : "Chunky", encoders : type_NumRange.fromInt(2), trackballs : type_NumRange.fromArray([0,2]), trackpads : type_NumRange.fromArray([0,2]), trackpadSize : 40, source : type_ValList.fromValue("https://github.com/freznel10/ChunkyV2"), img : type_ValList.fromValue("chunky-v2.jpg"), notes : type_ValList.fromValue("TODO: Author has a bunch of revisions of this keyboard - figure out if this entry needs to be split up.")};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(66),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(7),type_NumRange.fromInt(3),type_NumRange.fromInt(0),type_NumRange.fromInt(0));
	add(kb);
	kb = { name : "JiaEX", source : type_ValList.fromValue("https://github.com/osenchenko/jiaex"), img : type_ValList.fromValue("jiaex.jpg"), notes : type_ValList.fromValue("This keyboard is hard to classify due to its uncommon key placement")};
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.wristPads = type_ValList.fromValue(type_WristPads.Integrated);
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(68),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(4),type_NumRange.fromInt(3),type_NumRange.fromInt(1),type_NumRange.fromInt(3));
	ColStagKeyboard.setQMK(kb);
	add(kb);
	kb = { name : "supersplit", pinkyStagger : 1, switchProfile : type_ValList.fromValue(type_SwitchProfile.Choc), web : type_ValList.fromValue("https://tarneo.fr/posts/split_keyboard"), source : type_ValList.fromValue("https://github.com/tarneaux/supersplit"), img : type_ValList.fromValue("supersplit.webp")};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(68),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(9));
	add(kb);
	kb = { name : "Ergoinu", pinkyStagger : 0.1, source : type_ValList.fromValue("https://github.com/hsgw/ergoinu"), kit : type_ValList.fromValue("!https://dm9.thebase.in/items/13093286"), img : type_ValList.fromValue("Ergoinu.jfif")};
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(66),type_NumRange.fromInt(7),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(5));
	ColStagKeyboard.setQMK(kb);
	add(kb);
	kb = { name : "interphase", source : type_ValList.fromValue("https://github.com/Durburz/interphase"), img : type_ValList.fromValue("interphase.jpg")};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(66),type_NumRange.fromInt(7),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(2),type_NumRange.fromInt(0),type_NumRange.fromInt(-1),type_NumRange.fromInt(4));
	add(kb);
	kb = { name : "Djinn", source : type_ValList.fromValue("https://github.com/tzarc/djinn"), dpads : type_NumRange.fromInt(2), dpadDirs : type_NumRange.fromInt(5), displays : type_NumRange.fromInt(2), img : type_ValList.fromValue("djinn.jfif")};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(64),type_NumRange.fromInt(7),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(4));
	ColStagKeyboard.setQMK(kb);
	add(kb);
	kb = { name : "Kapl", source : type_ValList.fromValue("https://github.com/keyzog/kapl"), encoders : type_NumRange.fromArray([0,1]), img : type_ValList.fromValue("Kapl.jpg")};
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromArray([69,70]),type_NumRange.fromInt(7),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(4),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromInt(4));
	ColStagKeyboard.setQMK(kb);
	add(kb);
	var addHillside = function(kb) {
		kb.splay = type_SplayBase.Optional;
		ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc),type_KeySpacing.Choc);
		ColStagKeyboard.setQMK(kb);
		kb.pinkyStagger = 0.8;
		kb.source = type_ValList.fromValue("https://github.com/mmccoyd/hillside");
		kb.kit = type_ValList.fromValue("https://shop.beekeeb.com/product/hillside-keyboard-kit/");
		kb.prebuilt = type_ValList.fromValue("https://shop.beekeeb.com/product/pre-soldered-hillside-keyboard/");
		add(kb);
	};
	kb = { name : "Hillside 52/56"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromArray([44,56]),type_NumRange.fromArray([5,6]),type_NumRange.fromInt(3));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(5),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromArray([3,4]));
	kb.navCluster = [type_NavCluster.Arrows,type_NavCluster.Duo];
	kb.img = ["Hillside-52.webp","Hillside-56.jpg"];
	addHillside(kb);
	kb = { name : "Hillside 46/48"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromArray([40,48]),type_NumRange.fromArray([5,6]),type_NumRange.fromInt(3));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(5),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromArray([0,1]));
	kb.img = ["Hillside-46.jpg","Hillside-48.jpg"];
	addHillside(kb);
	kb = { name : "Drift", source : type_ValList.fromValue("https://github.com/Timception/Drift/"), prebuilt : type_ValList.fromValue("![th] https://solo.to/timception"), encoderType : type_ValList.fromValue(type_EncoderType.Wheel), encoders : type_NumRange.fromInt(2), displays : type_NumRange.fromInt(2), img : type_ValList.fromValue("Drift.jpg")};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(68),type_NumRange.fromInt(8),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(3),type_NumRange.fromInt(0),type_NumRange.fromInt(-1),type_NumRange.fromInt(0));
	ColStagKeyboard.setQMK(kb,type_ValList.fromValue(type_Software.Vial));
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	add(kb);
	kb = { name : "Fortitude60", thumbKeys : type_NumRange.fromInt(6), switchProfile : type_ValList.fromValue(type_SwitchProfile.MX), source : type_ValList.fromValue("https://github.com/Pekaso/fortitude60"), kit : type_ValList.fromValue("https://shop.yushakobo.jp/en/products/fortitude60"), img : type_ValList.fromValue("Fortitude60.jfif")};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(60),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	add(kb);
	var addDilemma = function(kb) {
		kb.trackpads = type_NumRange.fromInt(1);
		kb.encoders = type_NumRange.fromArray([0,2]);
		kb.hotswap = type_ValList.fromValue(type_HotSwap.Yes);
		kb.switchProfile = [type_SwitchProfile.MX,type_SwitchProfile.Choc];
		ColStagKeyboard.setQMK(kb,type_ValList.fromValue(type_Software.VIA));
		kb.caseType = [type_CaseType.Included,type_CaseType.ThirdParty];
		add(kb);
	};
	addDilemma({ name : "Dilemma", keys : type_NumRange.fromArray([34,36]), cols : type_NumRange.fromInt(5), rows : type_NumRange.fromInt(3), thumbKeys : type_NumRange.fromArray([2,4]), source : type_ValList.fromValue("https://github.com/Bastardkb/Dilemma"), kit : type_ValList.fromValue("!https://bastardkb.com/product/dilemma/"), prebuilt : type_ValList.fromValue("!https://bastardkb.com/product/dilemma-prebuilt-preorder/"), img : type_ValList.fromValue("Dilemma.jpg")});
	addDilemma({ name : "Dilemma Max", keys : type_NumRange.fromArray([54,56]), cols : type_NumRange.fromInt(6), rows : type_NumRange.fromInt(4), thumbKeys : type_NumRange.fromArray([3,4]), source : type_ValList.fromValue("https://github.com/Bastardkb/Dilemma"), kit : type_ValList.fromValue("!https://bastardkb.com/product/dilemma-max/"), prebuilt : type_ValList.fromValue("!https://bastardkb.com/product/dilemma-max-prebuilt-preorder/"), img : type_ValList.fromValue("Dilemma-Max.jpg")});
	kb = { name : "Ursa Minor", img : type_ValList.fromValue("ursa-minor.webp"), thumbKeys : type_NumRange.fromInt(3), switchProfile : type_ValList.fromValue(type_SwitchProfile.Choc), keySpacing : type_ValList.fromValue(type_KeySpacing.MX), assembly : type_ValList.fromValue(type_Assembly.Handwired), source : type_ValList.fromValue("https://github.com/markstory/ursa-minor-keyboard/")};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(54),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	add(kb);
	kb = { name : "articulation80", thumbKeys : type_NumRange.fromInt(4), navCluster : type_ValList.fromValue(type_NavCluster.Full), switchProfile : type_ValList.fromValue(type_SwitchProfile.Choc), keySpacing : type_ValList.fromValue(type_KeySpacing.Choc), source : type_ValList.fromValue("https://github.com/mylestunglee/articulation80"), img : type_ValList.fromValue("articulation80.jpg")};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromArray([56,80]),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	kb.splay = type_SplayBase.Yes;
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	add(kb);
	add({ name : "3w6", keys : type_NumRange.fromArray([35,36]), cols : type_NumRange.fromInt(5), rows : type_NumRange.fromInt(3), thumbKeys : type_NumRange.fromInt(3), trackballs : type_NumRange.fromArray([0,1]), trackballSize : pimoroniSize, switchProfile : type_ValList.fromValue(type_SwitchProfile.Choc), keySpacing : type_ValList.fromValue(type_KeySpacing.Choc), caseType : type_ValList.fromValue(type_CaseType.Included), source : type_ValList.fromValue("https://github.com/weteor/3W6"), kit : ["https://keycapsss.com/diy-kits/191/3w6-rp2040-split-keyboard-kit"], img : type_ValList.fromValue("3w6_rev2.jpg")});
	add({ name : "CozyKeys Bloomer", keys : type_NumRange.fromInt(87), cols : type_NumRange.fromInt(6), rows : type_NumRange.fromInt(5), thumbKeys : type_NumRange.fromInt(5), cornerKeys : type_NumRange.fromInt(6), navCluster : type_ValList.fromValue(type_NavCluster.Full), switchProfile : type_ValList.fromValue(type_SwitchProfile.MX), shape : type_ValList.fromValue(type_Shape.Unibody), caseType : type_ValList.fromValue(type_CaseType.Included), source : type_ValList.fromValue("https://github.com/cozykeys/Bloomer"), img : type_ValList.fromValue("Bloomer.jfif")});
	add({ name : "Keyclicks W-Ergolite", keys : type_NumRange.fromInt(66), cols : type_NumRange.fromInt(7), rows : type_NumRange.fromInt(4), thumbKeys : type_NumRange.fromInt(5), switchProfile : [type_SwitchProfile.MX,type_SwitchProfile.GateronLP], connection : [type_Connection.Wireless], firmware : type_ValList.fromValue(type_Firmware.QMK), software : type_ValList.fromValue(type_Software.Vial), caseType : type_ValList.fromValue(type_CaseType.Included), prebuilt : type_ValList.fromValue("!https://keyclicks.ca/products/w-ergolite-2-4g-wireless-split-keyboard-2"), img : type_ValList.fromValue("W-Ergolite.webp")});
	kb = { name : "Tern", shape : type_ValList.fromValue(type_Shape.Unibody), keys : type_NumRange.fromInt(30), cols : type_NumRange.fromInt(5), rows : type_NumRange.fromInt(3), innerKeys : type_NumRange.fromInt(-1), outerKeys : type_NumRange.fromInt(-1), thumbKeys : type_NumRange.fromInt(2), switchProfile : type_ValList.fromValue(type_SwitchProfile.Choc), keySpacing : type_ValList.fromValue(type_KeySpacing.CFX), caseType : type_ValList.fromValue(type_CaseType.Included), source : type_ValList.fromValue("https://github.com/rschenk/tern"), img : type_ValList.fromValue("tern.jpeg")};
	kb.splay = type_SplayBase.Yes;
	add(kb);
	kb = { name : "Rolio", encoders : type_NumRange.fromInt(2), thumbKeys : type_NumRange.fromInt(5), connection : [type_Connection.Wired,type_Connection.Bluetooth], firmware : type_ValList.fromValue(type_Firmware.ZMK), pinkyStagger : 0.25, caseType : type_ValList.fromValue(type_CaseType.Included), source : type_ValList.fromValue("https://github.com/MickiusMousius/RolioKeyboard"), img : type_ValList.fromValue("Rolio.jpg")};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(46),type_NumRange.fromInt(6),type_NumRange.fromInt(3));
	add(kb);
	kb = { name : "Chrumm 1.0"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromArray([64,70]),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	kb.rcols = type_NumRange.fromInt(7);
	kb.shape = type_ValList.fromValue(type_Shape.Unibody);
	kb.hotswap = type_ValList.fromValue(type_HotSwap.Yes);
	kb.switchProfile = type_ValList.fromValue(type_SwitchProfile.MX);
	kb.firmware = type_ValList.fromValue(type_Firmware.Custom);
	kb.thumbKeys = type_NumRange.fromInt(4);
	kb.navCluster = type_ValList.fromValue(type_NavCluster.Arrows);
	kb.cornerKeys = type_NumRange.fromInt(1);
	kb.encoders = type_NumRange.fromInt(1);
	kb.wristPads = type_ValList.fromValue(type_WristPads.Detachable);
	kb.tenting = type_NumRange.fromInt(6);
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.source = type_ValList.fromValue("https://github.com/sevmeyer/chrumm-keyboard/");
	kb.img = type_ValList.fromValue("Chrumm.jpg");
	add(kb);
	kb = { name : "Alien Invader"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(36),type_NumRange.fromInt(5),type_NumRange.fromInt(3));
	kb.thumbKeys = type_NumRange.fromInt(3);
	kb.hotswap = type_ValList.fromValue(type_HotSwap.Yes);
	kb.switchProfile = type_ValList.fromValue(type_SwitchProfile.MX);
	kb.shape = type_ValList.fromValue(type_Shape.Monoblock);
	ColStagKeyboard.setQMK(kb,type_ValList.fromValue(type_Software.VIA));
	kb.source = type_ValList.fromValue("https://github.com/protieusz/ScottoFly/blob/main/ScottoInvader/Alien%20Invader%20Integrated%20PCB%20from%20Scotto%20Invader/README.md");
	kb.img = type_ValList.fromValue("alien-invader.jpg");
	add(kb);
	kb = { name : "Buzzard"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(40),type_NumRange.fromInt(6),type_NumRange.fromInt(3));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(3),type_NumRange.fromInt(0),type_NumRange.fromInt(-1),type_NumRange.fromInt(0));
	kb.pinkyStagger = 1;
	kb.splay = type_SplayBase.Yes;
	kb.displays = type_NumRange.fromInt(2);
	kb.trackpoints = type_NumRange.fromInt(1);
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc),type_KeySpacing.Choc);
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.source = type_ValList.fromValue("https://github.com/crehmann/Buzzard");
	kb.img = type_ValList.fromValue("buzzard.webp");
	add(kb);
	var addReviung41 = function(kb) {
		ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(41),type_NumRange.fromInt(6),type_NumRange.fromInt(3));
		ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(3));
		kb.caseType = type_ValList.fromValue(type_CaseType.Included);
		add(kb);
	};
	kb = { name : "Reviung41"};
	kb.img = type_ValList.fromValue("REVIUNG41.jpg");
	kb.source = type_ValList.fromValue("https://github.com/gtips/reviung");
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	kb.kit = ["https://keebd.com/en-us/products/reviung-41-keyboard-kit","https://customkbd.com/collections/split-keyboards/products/reviung-41","https://www.littlekeyboards.com/products/reviung41-analyst-keyboard-kit","https://shop.beekeeb.com/product/reviung41-hotswap-diy-mechanical-keyboard-pcb-set-kit/","https://keycapsss.com/diy-kits/140/reviung41-keyboard-kit"];
	kb.prebuilt = ["https://shop.beekeeb.com/product/pre-soldered-reviung41/","https://new.boardsource.xyz/products/Reviung41","https://customkbd.com/collections/split-keyboards/products/reviung-41"];
	addReviung41(kb);
	kb = { name : "Trackball Reviung41"};
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc));
	kb.trackballSize = pimoroniSize;
	kb.trackballs = type_NumRange.fromInt(1);
	kb.source = type_ValList.fromValue("https://github.com/idank/keyboards/tree/main/reviung");
	kb.prebuilt = type_ValList.fromValue("!https://holykeebs.com/products/trackball-reviung41-low-profile");
	kb.img = type_ValList.fromValue("reviung-trackball.jpg");
	addReviung41(kb);
	kb = { name : "Fisk"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(54),type_NumRange.fromInt(6),type_NumRange.fromInt(3));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(6),type_NumRange.fromInt(2),type_NumRange.fromInt(1),type_NumRange.fromInt(0));
	ColStagKeyboard.setQMK(kb);
	kb.source = type_ValList.fromValue("https://github.com/vvhg1/fisk");
	kb.img = type_ValList.fromValue("fisk.jpg");
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	add(kb);
	var addIris = function(kb) {
		ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(56),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
		ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(4));
		kb.caseType = type_ValList.fromValue(type_CaseType.Included);
		add(kb);
	};
	kb = { name : "Iris"};
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	kb.img = type_ValList.fromValue("iris.webp");
	kb.kit = ["!https://keeb.io/collections/iris-split-ergonomic-keyboard","https://mechboards.co.uk/collections/kits/products/iris-kit","https://splitkb.com/collections/keyboard-kits/products/iris-rev-7-0"];
	kb.prebuilt = type_ValList.fromValue("!https://keeb.io/collections/iris-split-ergonomic-keyboard");
	addIris(kb);
	kb = { name : "Iris CE"};
	kb.img = type_ValList.fromValue("iris-ce.webp");
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc),type_KeySpacing.Choc);
	kb.kit = type_ValList.fromValue("!https://keeb.io/collections/iris-split-ergonomic-keyboard/products/iris-ce-low-profile-choc-hotswap-pcbs-for-split-ergonomic-keyboard");
	addIris(kb);
	kb = { name : "TE Cleave"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(91),type_NumRange.fromInt(6),type_NumRange.fromInt(5));
	kb.shape = type_ValList.fromValue(type_Shape.Unibody);
	kb.rcols = type_NumRange.fromInt(7);
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(2),type_NumRange.fromInt(3),type_NumRange.fromInt(2),type_NumRange.fromInt(2));
	kb.navCluster = type_ValList.fromValue(type_NavCluster.Duo);
	kb.switchProfile = type_ValList.fromValue(type_SwitchProfile.Optical);
	kb.hotswap = type_ValList.fromValue(type_HotSwap.Yes);
	kb.firmware = type_ValList.fromValue(type_Firmware.Custom);
	kb.software = type_ValList.fromValue(type_Software.Custom);
	kb.wristPads = type_ValList.fromValue(type_WristPads.Integrated);
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.tilt = type_NumRange.fromInt(2);
	kb.prebuilt = type_ValList.fromValue("![CA] https://trulyergonomic.com/ergonomic-keyboards/mechanical-keyboards/products/cleave-truly-ergonomic-mechanical-switch-keyboard/");
	kb.img = type_ValList.fromValue("Truly-Ergonomic-Cleave-keyboard-1x1-2.jpg");
	kb.notes = type_ValList.fromValue("Flexibility of on-board software is unclear, but it's got a fairly normal keymap");
	add(kb);
	kb = { name : "Glove80"};
	kb.shape = [type_Shape.Split,type_Shape.Keywell];
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(80),type_NumRange.fromInt(6),type_NumRange.fromInt(5));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(6),type_NumRange.fromInt(-1),type_NumRange.fromInt(0),type_NumRange.fromInt(5));
	kb.hotswap = type_ValList.fromValue(type_HotSwap.Yes);
	kb.switchProfile = type_ValList.fromValue(type_SwitchProfile.Choc);
	kb.keySpacing = type_ValList.fromValue(type_KeySpacing.Choc);
	kb.connection = [type_Connection.Wired,type_Connection.Bluetooth];
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.prebuilt = type_ValList.fromValue("!http://www.moergo.com");
	kb.img = type_ValList.fromValue("glove80.jpg");
	add(kb);
	kb = { name : "MOMOKA ERGO"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(70),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(6),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromInt(5));
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	ColStagKeyboard.setQMK(kb);
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.web = type_ValList.fromValue("https://www.momoka.co/ergo");
	kb.prebuilt = type_ValList.fromValue("!https://momoka.store/collections/keyboards/products/momoka-ergo");
	kb.img = type_ValList.fromValue("momoka-ergo.webp");
	add(kb);
	kb = { name : "Keyboardio Model 100"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(64),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(5),type_NumRange.fromInt(3),type_NumRange.fromInt(0),type_NumRange.fromInt(0));
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	kb.wristPads = type_ValList.fromValue(type_WristPads.Integrated);
	kb.tenting = type_NumRange.fromArray([0,15]);
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.prebuilt = type_ValList.fromValue("!https://shop.keyboard.io/products/model-100");
	kb.img = type_ValList.fromValue("keyboardio-m100.webp");
	add(kb);
	kb = { name : "ZSA Voyager"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(52),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(2),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromInt(0));
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc),type_KeySpacing.MX);
	ColStagKeyboard.setQMK(kb,type_ValList.fromValue(type_Software.Custom));
	kb.tenting = type_NumRange.fromArray([0,4]);
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.prebuilt = type_ValList.fromValue("!https://www.zsa.io/voyager/");
	kb.img = type_ValList.fromValue("zsa-voyager.jpg");
	add(kb);
	kb = { name : "ZSA Moonlander"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(72),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(4),type_NumRange.fromInt(3),type_NumRange.fromInt(0),type_NumRange.fromInt(5));
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	ColStagKeyboard.setQMK(kb,type_ValList.fromValue(type_Software.Custom));
	kb.wristPads = type_ValList.fromValue(type_WristPads.Detachable);
	kb.tenting = type_NumRange.fromArray([0,40]);
	kb.tilt = type_NumRange.fromArray([-10,0]);
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.prebuilt = type_ValList.fromValue("!https://www.zsa.io/moonlander/");
	kb.img = type_ValList.fromValue("zsa-moonlander.avif");
	add(kb);
	kb = { name : "ErgoDox EZ"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(76),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(6),type_NumRange.fromInt(3),type_NumRange.fromInt(0),type_NumRange.fromInt(5));
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	ColStagKeyboard.setQMK(kb,type_ValList.fromValue(type_Software.Custom));
	kb.wristPads = type_ValList.fromValue(type_WristPads.Detachable);
	kb.tenting = type_NumRange.fromArray([0,11]);
	kb.tilt = type_NumRange.fromArray([-10,0]);
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.prebuilt = type_ValList.fromValue("!https://ergodox-ez.com/");
	kb.img = type_ValList.fromValue("ergodox-ez.avif");
	add(kb);
	kb = { name : "Dygma Defy"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(68),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(7),type_NumRange.fromInt(3),type_NumRange.fromInt(0),type_NumRange.fromInt(0));
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	kb.connection = [type_Connection.Wired,type_Connection.Bluetooth];
	kb.wristPads = type_ValList.fromValue(type_WristPads.Integrated);
	kb.tenting = type_NumRange.fromArray([0,60]);
	kb.tilt = type_NumRange.fromArray([-10,0]);
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.prebuilt = type_ValList.fromValue("!https://dygma.com/pages/defy");
	kb.img = type_ValList.fromValue("dygma-defy.webp");
	add(kb);
	kb = { name : "Osprey"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(74),type_NumRange.fromInt(7),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(7),type_NumRange.fromInt(3),type_NumRange.fromInt(-1),type_NumRange.fromInt(2));
	kb.hotswap = type_ValList.fromValue(type_HotSwap.Yes);
	kb.shape = type_ValList.fromValue(type_Shape.Unibody);
	kb.pinkyStagger = 0.5;
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.source = type_ValList.fromValue("!https://github.com/nshie/osprey");
	kb.img = type_ValList.fromValue("osprey.jpg");
	add(kb);
	kb = { name : "ErgoTravel"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(54),type_NumRange.fromInt(6),type_NumRange.fromInt(3));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromArray([2,3]),type_NumRange.fromInt(2),type_NumRange.fromInt(0),type_NumRange.fromInt(4));
	ColStagKeyboard.setHotswap(kb,[type_SwitchProfile.MX,type_SwitchProfile.Alps,type_SwitchProfile.Choc]);
	kb.caseType = type_ValList.fromValue(type_CaseType.Included);
	kb.source = type_ValList.fromValue("https://github.com/jpconstantineau/ErgoTravel");
	kb.kit = type_ValList.fromValue("https://mechboards.co.uk/products/ergotravel-kit");
	kb.extras = ["![CA] https://store.jpconstantineau.com/#/group/split_boards"];
	kb.img = type_ValList.fromValue("Ergotravel.jpg");
	add(kb);
};
var ColStagKeyboard = {};
ColStagKeyboard._new = function(name) {
	return { name : name};
};
ColStagKeyboard.setMatrix = function(this1,keys,cols,rows) {
	this1.keys = keys;
	this1.cols = cols;
	this1.rows = rows;
};
ColStagKeyboard.setExtras = function(this1,thumbKeys,innerKeys,outerKeys,cornerKeys) {
	this1.thumbKeys = thumbKeys;
	this1.innerKeys = innerKeys;
	this1.outerKeys = outerKeys;
	this1.cornerKeys = cornerKeys;
};
ColStagKeyboard.setHotswap = function(this1,profile,spacing) {
	this1.hotswap = type_ValList.fromValue(type_HotSwap.Yes);
	this1.switchProfile = profile;
	if(profile == type_ValList.fromValue(type_SwitchProfile.MX) && spacing == null) {
		spacing = type_KeySpacing.MX;
	}
	this1.keySpacing = type_ValList.fromValue(spacing);
};
ColStagKeyboard.setQMK = function(this1,sw) {
	this1.firmware = type_ValList.fromValue(type_Firmware.QMK);
	this1.software = sw;
};
var table_FancyTable = function() {
	this.baseURL = "https://yal-tools.github.io/ergo-keyboards/";
	this.canUpdateURL = true;
	this.canUpdateFilters = false;
	this.sortAscending = false;
	this.sortColHead = null;
	this.outElement = null;
	this.testRow = null;
	this.countElement = null;
	this.rows = [];
	this.header = null;
	this.keyboards = [];
	this.filterOrder = [];
	this.columns = [];
};
table_FancyTable.__name__ = true;
table_FancyTable.prototype = {
	addColumn: function(col) {
		col.table = this;
		this.columns.push(col);
		this.filterOrder.push(table_FancyTableFilterOrder.Column(col));
	}
	,addFilterHeader: function(text) {
		var h = new table_FancyFilterHeader(text);
		this.filterOrder.push(table_FancyTableFilterOrder.Header(h));
		return h;
	}
	,buildFilters: function(out) {
		table_FancyTableFilters.build(this,out);
	}
	,sortBy: function(sortColumn,ascending) {
		var sortRows = this.rows.slice();
		sortRows.sort(function(a,b) {
			return sortColumn.compareKeyboards(a.keyboard,b.keyboard,ascending);
		});
		sortRows.reverse();
		var _g = 0;
		while(_g < sortRows.length) {
			var row = sortRows[_g];
			++_g;
			this.header.element.after(row.element);
		}
	}
	,createRow: function(keyboard) {
		var row = new table_FancyRow(keyboard);
		var _g = 0;
		var _g1 = this.columns;
		while(_g < _g1.length) {
			var column = _g1[_g];
			++_g;
			var cell = new table_FancyTableCell(column);
			tools_HtmlTools.setDisplayFlag(cell.element,column.show);
			column.buildValue(cell.element,keyboard);
			row.cells.push(cell);
			row.element.appendChild(cell.element);
		}
		return row;
	}
	,buildTable: function(out) {
		var _gthis = this;
		this.outElement = out;
		this.header = new table_FancyRow(null);
		var _g = 0;
		var _g1 = this.columns;
		while(_g < _g1.length) {
			var column = _g1[_g];
			++_g;
			var cell = [new table_FancyTableHeaderCell(column)];
			tools_HtmlTools.setDisplayFlag(cell[0].element,column.show);
			var tmp = column.getId();
			cell[0].element.id = "header-" + tmp;
			if(column.shortName != null) {
				var text = column.shortName;
				cell[0].element.appendChild(window.document.createTextNode(text));
				cell[0].element.title = column.name;
			} else {
				var text1 = column.name;
				cell[0].element.appendChild(window.document.createTextNode(text1));
			}
			if(column.canSort) {
				cell[0].element.classList.add("can-sort");
				var sfx = "Can sort";
				if(cell[0].element.title != null) {
					cell[0].element.title += "\n" + sfx;
				} else {
					cell[0].element.title = sfx;
				}
				cell[0].element.onclick = (function(cell) {
					return function(_) {
						if(_gthis.sortColHead != cell[0]) {
							if(_gthis.sortColHead != null) {
								_gthis.sortColHead.element.classList.remove("sort-column");
								_gthis.sortColHead.element.classList.remove("sort-ascending");
							}
							_gthis.sortAscending = false;
							_gthis.sortColHead = cell[0];
							_gthis.sortColHead.element.classList.add("sort-column");
						} else {
							_gthis.sortAscending = !_gthis.sortAscending;
							tools_HtmlTools.setTokenFlag(_gthis.sortColHead.element.classList,"sort-ascending",_gthis.sortAscending);
						}
						_gthis.sortBy(_gthis.sortColHead.column,_gthis.sortAscending);
						_gthis.updateURL();
					};
				})(cell);
			}
			this.header.cells.push(cell[0]);
			this.header.element.appendChild(cell[0].element);
		}
		out.appendChild(this.header.element);
		var _g = 0;
		var _g1 = this.keyboards;
		while(_g < _g1.length) {
			var keyboard = _g1[_g];
			++_g;
			var row = this.createRow(keyboard);
			this.rows.push(row);
			out.appendChild(row.element);
		}
		if(this.countElement != null) {
			this.countElement.innerText = "" + this.keyboards.length;
		}
	}
	,updateFilters: function(_updateURL) {
		if(_updateURL == null) {
			_updateURL = true;
		}
		if(!this.canUpdateFilters) {
			return;
		}
		var found = 0;
		var _g = 0;
		var _g1 = this.rows;
		while(_g < _g1.length) {
			var row = _g1[_g];
			++_g;
			var keyboard = row.keyboard;
			var show = true;
			var _g2 = 0;
			var _g3 = this.columns;
			while(_g2 < _g3.length) {
				var column = _g3[_g2];
				++_g2;
				if(column.wantFilter) {
					if(column.matchesFilter(keyboard)) {
						continue;
					}
					show = false;
					break;
				}
			}
			tools_HtmlTools.setDisplayFlag(row.element,show);
			if(show) {
				++found;
			}
		}
		if(this.countElement != null) {
			this.countElement.innerText = "" + found;
		}
		if(_updateURL) {
			this.updateURL();
		}
	}
	,saveFilters: function() {
		var params = { };
		var _g = 0;
		var _g1 = this.columns;
		while(_g < _g1.length) {
			var column = _g1[_g];
			++_g;
			if(column.wantFilter) {
				column.saveFilterParams(params);
			}
		}
		if(this.sortColHead != null) {
			var id = this.sortColHead.column.getId();
			if(!this.sortAscending) {
				id = "-" + id;
			}
			params["sort"] = id;
		}
		var paramKeys = Reflect.fields(params);
		if(paramKeys.length == 0) {
			return "";
		}
		var paramPairs = [];
		var _g = 0;
		while(_g < paramKeys.length) {
			var key = paramKeys[_g];
			++_g;
			var val = params[key];
			if(val != "") {
				val = window.encodeURIComponent(params[key]);
				paramPairs.push(key + "=" + val);
			} else {
				paramPairs.push(key);
			}
		}
		if(paramPairs.length == 0) {
			return "";
		}
		return "?" + paramPairs.join("&");
	}
	,updateURL: function() {
		if(!this.canUpdateURL) {
			return;
		}
		var search = this.saveFilters();
		var loc = window.document.location;
		var prefix = Main.baseURL;
		if(loc.protocol == "file:") {
			prefix = "https://yal-tools.github.io/ergo-keyboards/";
		} else {
			prefix = loc.origin + loc.pathname;
		}
		var url = prefix + search + loc.hash;
		try {
			window.history.replaceState("","",url);
			return;
		} catch( _g ) {
		}
		var fd = window.document.querySelector("#share-field");
		fd.style.display = "inherit";
		fd.value = url;
	}
	,loadFilters: function(search) {
		var params = new URLSearchParams(search);
		var obj = { };
		params.forEach(function(val,key,_) {
			obj[key] = val;
		});
		this.canUpdateFilters = false;
		var wantFilter = false;
		var _g = 0;
		var _g1 = this.columns;
		while(_g < _g1.length) {
			var column = _g1[_g];
			++_g;
			var filter = column.loadFilterParams(obj);
			column.filterCheckbox.checked = filter;
			if(filter) {
				column.filterCheckbox.onchange(null);
				wantFilter = true;
			}
		}
		this.canUpdateFilters = true;
		var sort = obj["sort"];
		if(sort != null) {
			var desc = sort.charAt(0) == "-";
			if(desc) {
				sort = HxOverrides.substr(sort,1,null);
			}
			var th = window.document.getElementById("header-" + sort);
			if(th != null) {
				th.click();
				if(!desc) {
					th.click();
				}
			}
		}
		if(wantFilter) {
			this.updateFilters(false);
		}
	}
	,loadTest: function(kb) {
		if(this.testRow != null) {
			this.testRow.element.parentElement.removeChild(this.testRow.element);
			HxOverrides.remove(this.keyboards,this.testRow.keyboard);
		}
		var _g = 0;
		var _g1 = this.columns;
		while(_g < _g1.length) {
			var col = _g1[_g];
			++_g;
			col.load(kb);
		}
		this.testRow = this.createRow(kb);
		this.outElement.appendChild(this.testRow.element);
		this.rows.push(this.testRow);
	}
};
var ColStagTable = function() {
	table_FancyTable.call(this);
	var kb = null;
	this.initGeneral(kb);
	this.initSwitch(kb);
	this.initInputs(kb);
	this.initCuriosities(kb);
	this.initConveniences(kb);
	this.initLinks(kb);
	var col;
	ColStagBoards.init(this.keyboards);
	OrthoBoards.init(this.keyboards);
	var kbs = window.keyboardData;
	var _g = 0;
	while(_g < kbs.length) {
		var kb = kbs[_g];
		++_g;
		if(kb == null || !Reflect.isObject(kb)) {
			continue;
		}
		var _g1 = 0;
		var _g2 = this.columns;
		while(_g1 < _g2.length) {
			var col = _g2[_g1];
			++_g1;
			col.load(kb);
		}
		this.keyboards.push(kb);
	}
};
ColStagTable.__name__ = true;
ColStagTable.__super__ = table_FancyTable;
ColStagTable.prototype = $extend(table_FancyTable.prototype,{
	addImagePara: function(notes,filename,width,height,alt) {
		var p = window.document.createElement("p");
		p.classList.add("img");
		var img = window.document.createElement("img");
		img.src = "help/" + filename;
		img.alt = alt;
		img.width = width;
		img.height = height;
		p.appendChild(img);
		p.appendChild(window.document.createElement("br"));
		p.appendChild(window.document.createTextNode(alt));
		notes.appendChild(p);
		return img;
	}
	,initClusters: function(kb) {
		var _gthis = this;
		this.addFilterHeader("Key clusters and specifics");
		var notes;
		var col;
		var irCol = new table_IntRangeColumn("Thumb keys",new table_FancyField("thumbKeys",function(q,wantSet,setValue) {
			if(wantSet) {
				q.thumbKeys = setValue;
				return null;
			} else {
				return q.thumbKeys;
			}
		}));
		irCol.shortName = "#thumb";
		irCol.filterMinDefault = 1;
		irCol.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"Keys below the main area that are (mostly) intended to be pressed with a thumb. " + "Counted per keyboard half.");
			_gthis.addImagePara(div,"thumb-keys.png",450,120,"Thumb keys on a Breeze keyboard");
			tools_HtmlTools.appendParaTextNode(div,"On wider keyboards thumb keys tend to smoothly transition into a key row" + " so we'll assume the keys under the inner-most 4 main area columns to be thumb-accessible:");
			_gthis.addImagePara(div,"thumb-keys-2.png",450,200,"Thumb keys on a Redox keyboard");
		};
		this.addColumn(irCol);
		irCol = new table_IntRangeColumn("Inner keys",new table_FancyField("innerKeys",function(q,wantSet,setValue) {
			if(wantSet) {
				q.innerKeys = setValue;
				return null;
			} else {
				return q.innerKeys;
			}
		}));
		irCol.shortName = "#inner";
		irCol.filterMinDefault = 1;
		irCol.show = false;
		irCol.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"Sometimes keyboards have keys between the two halves that aren't part of the main area, " + "but still convenient enough to access.");
			_gthis.addImagePara(div,"inner-keys.png",450,200,"Inner keys on a Redox keyboard");
			tools_HtmlTools.appendParaTextNode(div,"If the inner row is missing keys (such as on hummingbird-type keyboards)," + " this can be negative.");
		};
		this.addColumn(irCol);
		irCol = new table_IntRangeColumn("Outer keys",new table_FancyField("outerKeys",function(q,wantSet,setValue) {
			if(wantSet) {
				q.outerKeys = setValue;
				return null;
			} else {
				return q.outerKeys;
			}
		}));
		this.addColumn(irCol);
		irCol.shortName = "#outer";
		irCol.filterMinDefault = 1;
		irCol.show = false;
		irCol.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"Sometimes a keyboard has an extra key or two on the outer edges.");
			_gthis.addImagePara(div,"outer-keys.png",450,150,"Outer keys on an Avalanche keyboard");
			tools_HtmlTools.appendParaTextNode(div,"And if it's missing keys on the outer columns, this can be negative.");
			_gthis.addImagePara(div,"outer-keys-2.png",450,150,"A missing outer key on a Drift keyboard");
		};
		irCol = new table_IntRangeColumn("Corner keys",new table_FancyField("cornerKeys",function(q,wantSet,setValue) {
			if(wantSet) {
				q.cornerKeys = setValue;
				return null;
			} else {
				return q.cornerKeys;
			}
		}));
		this.addColumn(irCol);
		irCol.shortName = "#corner";
		irCol.filterMinDefault = 1;
		irCol.show = false;
		irCol.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"If a keyboard has keys in bottom-left/bottom-right corners below the main area, " + "this is the number of such keys that are positioned in a convenient row.");
			_gthis.addImagePara(div,"corner-keys.png",450,150,"Corner keys on an ErgoNICE keyboard");
			tools_HtmlTools.appendParaTextNode(div,"Such keys are often used for modifiers (on the left half) or " + "65%-style inline arrow key cluster / arrow key row (on the right half).");
			tools_HtmlTools.appendParaTextNode(div,"If corner keys transition into thumb keys, this is capped at 5.");
			_gthis.addImagePara(div,"corner-keys-2.png",450,200,"A continuous bottom row of keys on a Kapl keyboard");
		};
		var navCluster = new table_TagListColumn("Navigation cluster",new table_FancyField("navCluster",function(q,wantSet,setValue) {
			if(wantSet) {
				q.navCluster = setValue;
				return null;
			} else {
				return q.navCluster;
			}
		}),type_NavCluster);
		navCluster.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"Arrow keys and such.");
			var ul = tools_HtmlTools.appendElTextNode(div,"ul","");
			tools_HtmlTools.appendElTextNode(ul,"li","\"Arrows\" means that there's a standard T-shaped cluster.");
			tools_HtmlTools.appendElTextNode(ul,"li","\"Duo\" means that there are two of those" + " (second commonly being used for home/end/pgup/pgdn)");
			tools_HtmlTools.appendElTextNode(ul,"li","\"Full\" means that there's an arrow cluster" + " with a standard 6-key cluster roughly above it.");
			tools_HtmlTools.appendParaTextNode(div,"Also see \"corner keys\" for alternative placement ideas");
		};
		navCluster.show = false;
		navCluster.shortName = "nav";
		navCluster.filterTags = [type_NavCluster.Arrows,type_NavCluster.Duo,type_NavCluster.Full];
		navCluster.shortLabels.set(type_NavCluster.None,"");
		this.addColumn(navCluster);
		var pinkyStag = new table_FloatColumn("Pinky stagger",new table_FancyField("pinkyStagger",function(q,wantSet,setValue) {
			if(wantSet) {
				q.pinkyStagger = setValue;
				return null;
			} else {
				return q.pinkyStagger;
			}
		}));
		pinkyStag.show = false;
		pinkyStag.shortName = "pkStag";
		pinkyStag.filterIncludeNullLabel = "Include keyboards without listed stagger";
		pinkyStag.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"Stagger between pinky finger column(s) and the ring finger column, " + "measured in key-size units (0.5 is half a key step down).");
		};
		this.addColumn(pinkyStag);
		var splay = new table_TagColumn("Splay",new table_FancyField("splay",function(q,wantSet,setValue) {
			if(wantSet) {
				q.splay = setValue;
				return null;
			} else {
				return q.splay;
			}
		}),type_SplayBase);
		splay.show = false;
		splay.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"Most keyboards have columns of keys parallel to each other, " + "but you can also have them at a slight angle for convenience.");
			tools_HtmlTools.appendParaTextNode(div,"\"Optional\" usually means that there are two versions of the keyboard - " + "one with parallel columns and one with angled columns.");
		};
		splay.filterLabels.set(type_SplayBase.PinkyOnly,"Pinky columns only");
		splay.shortLabels.set(type_SplayBase.No,"-");
		splay.shortLabels.set(type_SplayBase.Yes,"+");
		splay.shortLabels.set(type_SplayBase.Optional,"±");
		splay.shortLabels.set(type_SplayBase.PinkyOnly,"p");
		this.addColumn(splay);
	}
	,initGeneral: function(kb) {
		var _gthis = this;
		var col = new table_NameColumn("Name & photo",new table_FancyField("name",function(q,wantSet,setValue) {
			if(wantSet) {
				q.name = setValue;
				return null;
			} else {
				return q.name;
			}
		}));
		this.addColumn(col);
		this.addFilterHeader("General");
		var shape = new table_TagListColumn("Shape",new table_FancyField("shape",function(q,wantSet,setValue) {
			if(wantSet) {
				q.shape = setValue;
				return null;
			} else {
				return q.shape;
			}
		}),type_Shape);
		shape.show = false;
		shape.shortLabels.set(type_Shape.Monoblock,"Mono");
		shape.shortLabels.set(type_Shape.Unibody,"Uni");
		shape.shortLabels.set(type_Shape.Keywell,"KW");
		shape.shortLabels.set(type_Shape.Special,"*");
		shape.onNotes = function(div) {
			var shapeUL = tools_HtmlTools.appendElTextNode(div,"ul","");
			tools_HtmlTools.appendElTextNode(shapeUL,"li","Monoblock means a single-piece keyboard with no gaps, " + "such as with common non-ergonomic keyboards.");
			tools_HtmlTools.appendElTextNode(shapeUL,"li","Unibody means a single-piece keyboard with " + "some sort of a gap in the middle of it.");
			tools_HtmlTools.appendElTextNode(shapeUL,"li","Split means a keyboard consisting of two or more physical pieces that are connected " + "together with a cable or wirelessly.");
			tools_HtmlTools.appendElTextNode(shapeUL,"li","Special means something interesting - folding keyboards, layered keyboards, and so on.");
		};
		this.addColumn(shape);
		var staggerType = new table_TagColumn("Stagger type",new table_FancyField("stagger",function(q,wantSet,setValue) {
			if(wantSet) {
				q.stagger = setValue;
				return null;
			} else {
				return q.stagger;
			}
		}),type_StaggerType);
		staggerType.show = false;
		staggerType.shortName = "Stag";
		staggerType.filterLabels.set(type_StaggerType.Column,"Columnar");
		staggerType.filterLabels.set(type_StaggerType.Ortho,"Ortholinear");
		staggerType.shortLabels.set(type_StaggerType.Column,"Col");
		staggerType.shortLabels.set(type_StaggerType.Ortho,"OL");
		this.addColumn(staggerType);
		var conType = new table_TagListColumn("Connection",new table_FancyField("connection",function(q,wantSet,setValue) {
			if(wantSet) {
				q.connection = setValue;
				return null;
			} else {
				return q.connection;
			}
		}),type_Connection);
		conType.shortName = "Con";
		conType.shortLabels.set(type_Connection.Wired,"W");
		conType.shortLabels.set(type_Connection.Bluetooth,"BT");
		conType.shortLabels.set(type_Connection.Wireless,"P");
		conType.filterLabels.set(type_Connection.Wireless,"Proprietary/other wireless");
		this.addColumn(conType);
		col = new table_IntRangeColumn("Key count",new table_FancyField("keys",function(q,wantSet,setValue) {
			if(wantSet) {
				q.keys = setValue;
				return null;
			} else {
				return q.keys;
			}
		}));
		this.addColumn(col);
		col.shortName = "#keys";
		col = new table_IntRangeColumn("Rows",new table_FancyField("rows",function(q,wantSet,setValue) {
			if(wantSet) {
				q.rows = setValue;
				return null;
			} else {
				return q.rows;
			}
		}));
		this.addColumn(col);
		col.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"The number of rows in a keyboard half's main area," + " not counting the thumb-keys row.");
			_gthis.addImagePara(div,"matrix.png",450,250,"Key matrix on a Redox keyboard");
			tools_HtmlTools.appendParaTextNode(div,"Conventionally, 4th row is typically used for digit keys" + " and 5th row is typically used for F-key," + " but don't let anyone tell you what to do" + " - most of these keyboards are reprogrammable.");
		};
		col = new table_IntRangeColumn("Columns",new table_FancyField("cols",function(q,wantSet,setValue) {
			if(wantSet) {
				q.cols = setValue;
				return null;
			} else {
				return q.cols;
			}
		}));
		this.addColumn(col);
		col.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"The number of columns in a keyboard half's main area," + " not counting the extension columns.");
			tools_HtmlTools.appendParaTextNode(div,"To avoid some classification oddities," + " let's assume non-chorded keyboards to intend to have at least 5 columns" + " and evaluate edge columns based on their layout, completeness," + " and suitability for common main-area mappings.");
			tools_HtmlTools.appendParaTextNode(div,"For example:");
			var ul = tools_HtmlTools.appendElTextNode(div,"ul","");
			var li = tools_HtmlTools.appendElTextNode(ul,"li","ErgoDox's inner columns are extension columns since two keys are 1.5u tall.");
			li = tools_HtmlTools.appendElTextNode(ul,"li","Pinky4's inner columns are extension columns since the bottom keys are rotated.");
			li = tools_HtmlTools.appendElTextNode(ul,"li","ErgoDash's inner columns are extension columns since they are offset by half a key.");
			li = tools_HtmlTools.appendElTextNode(ul,"li","Spleeb's and Drift's outer columns aren't extension columns" + " as only a single key is missing.");
			tools_HtmlTools.appendParaTextNode(div,"This system isn't perfect and some keyboards don't fit well at all," + " in which case \"outer keys\" may have to be used to roughly annotate" + " total number of extra/missing keys across multiple columns.");
		};
		col.shortName = "Cols";
		var rcolsFn = function(kb,set,val) {
			if(set) {
				kb.rcols = val;
				return null;
			} else {
				var tmp = kb.rcols;
				if(tmp != null) {
					return tmp;
				} else {
					return kb.cols;
				}
			}
		};
		var rcolsFd = new table_FancyField("rcols",rcolsFn);
		col = new table_IntRangeColumn("Right-side columns",rcolsFd);
		col.show = false;
		col.shortName = "ColsR";
		col.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"Sometimes a keyboard has more columns on the right side than on the left. " + "This can be handy to imitate a standard 65%/75% layout better, " + "or to make space for language-specific keys.");
			_gthis.addImagePara(div,"rcols.png",450,150,"Additional columns on Articulation80");
			tools_HtmlTools.appendParaTextNode(div,"Depending on the keyboard, not all of these might be fully filled with keys.");
		};
		this.addColumn(col);
		this.initClusters(kb);
	}
	,initSwitch: function(kb) {
		this.addFilterHeader("Switches and keycaps");
		var hotswap = new table_TagListColumn("Hot-swappable switches",new table_FancyField("hotswap",function(q,wantSet,setValue) {
			if(wantSet) {
				q.hotswap = setValue;
				return null;
			} else {
				return q.hotswap;
			}
		}),type_HotSwap);
		hotswap.shortName = "hs";
		hotswap.shortLabels.set(type_HotSwap.Unspecified,"");
		hotswap.shortLabels.set(type_HotSwap.Yes,"+");
		hotswap.shortLabels.set(type_HotSwap.No,"-");
		this.addColumn(hotswap);
		var switchType = new table_TagListColumn("Switch profile",new table_FancyField("switchProfile",function(q,wantSet,setValue) {
			if(wantSet) {
				q.switchProfile = setValue;
				return null;
			} else {
				return q.switchProfile;
			}
		}),type_SwitchProfile);
		switchType.shortName = "SwP";
		switchType.filterLabels.set(type_SwitchProfile.Choc,"Kailh Choc V1");
		switchType.filterLabels.set(type_SwitchProfile.ChocV2,"Kailh Choc V2");
		switchType.filterLabels.set(type_SwitchProfile.GateronLP,"Gateron low-profile");
		switchType.shortLabels.set(type_SwitchProfile.Unknown,"");
		switchType.shortLabels.set(type_SwitchProfile.GateronLP,"GLP");
		switchType.shortLabels.set(type_SwitchProfile.OutemuLP,"OLP");
		switchType.shortLabels.set(type_SwitchProfile.CherryULP,"CULP");
		switchType.shortLabels.set(type_SwitchProfile.Optical,"Opt");
		this.addColumn(switchType);
		var switchForce = new table_IntListColumn("Switch actuation force (if not hotswap)",new table_FancyField("switchForce",function(q,wantSet,setValue) {
			if(wantSet) {
				q.switchForce = setValue;
				return null;
			} else {
				return q.switchForce;
			}
		}));
		switchForce.shortName = "gf";
		switchForce.nullCaption = "*";
		switchForce.filterIncludeNullLabel = "Include keyboards with hotswap switches";
		var switchKind = new table_TagListColumn("Switch feel (if not hotswap)",new table_FancyField("switchKind",function(q,wantSet,setValue) {
			if(wantSet) {
				q.switchKind = setValue;
				return null;
			} else {
				return q.switchKind;
			}
		}),type_SwitchKind);
		switchKind.defaultValue = null;
		switchKind.shortName = "SwF";
		switchKind.shortLabels.set(type_SwitchKind.Linear,"L");
		switchKind.shortLabels.set(type_SwitchKind.Tactile,"T");
		switchKind.shortLabels.set(type_SwitchKind.Clicky,"C");
		switchKind.shortLabels.set(type_SwitchKind.Other,"#");
		switchKind.nullCaption = "*";
		var colSpacing = new table_TagListColumn("Key spacing",new table_FancyField("keySpacing",function(q,wantSet,setValue) {
			if(wantSet) {
				q.keySpacing = setValue;
				return null;
			} else {
				return q.keySpacing;
			}
		}),type_KeySpacing);
		colSpacing.shortName = "kSp";
		colSpacing.show = false;
		colSpacing.filterLabels.set(type_KeySpacing.MX,"MX (19mm x 19mm)");
		colSpacing.filterLabels.set(type_KeySpacing.MinMX,"min. MX (16mm x 16mm)");
		colSpacing.filterLabels.set(type_KeySpacing.Choc,"Choc (18mm x 17mm)");
		colSpacing.filterLabels.set(type_KeySpacing.CFX,"CFX (17mm x 17mm)");
		colSpacing.filterLabels.set(type_KeySpacing.MinChoc,"min. Choc (14.5mm x 14.5mm)");
		colSpacing.shortLabels.set(type_KeySpacing.Unknown,"?");
		colSpacing.shortLabels.set(type_KeySpacing.MinMX,"mMX");
		colSpacing.shortLabels.set(type_KeySpacing.MinChoc,"mChoc");
		this.addColumn(colSpacing);
	}
	,initInputs: function(kb) {
		var header = this.addFilterHeader("Other input devices");
		var noteTotal = new table_FancyHeaderNote("NB! Counted total rather than per half");
		header.editorNotes.push(noteTotal);
		header.filterNotes.push(noteTotal);
		header.filterNotes.push(new table_FancyHeaderNote("NB! ZMK + Wireless",function(div) {
			tools_HtmlTools.appendParaTextNode(div,"As of Nov 2023, ZMK firmware has limited support for pointing devices," + " therefore wireless keyboards with pointing devices typically only support them" + " in (wired) QMK mode.");
			tools_HtmlTools.appendParaTextNode(div,"Please double-check documentation for keyboards to avoid disappointment.");
		}));
		var irCol = new table_IntRangeColumn("Encoders",new table_FancyField("encoders",function(q,wantSet,setValue) {
			if(wantSet) {
				q.encoders = setValue;
				return null;
			} else {
				return q.encoders;
			}
		}));
		this.addColumn(irCol);
		irCol.shortName = "#enc";
		irCol.filterMinDefault = 1;
		var enct = new table_TagListColumn("Encoder type",new table_FancyField("encoderType",function(q,wantSet,setValue) {
			if(wantSet) {
				q.encoderType = setValue;
				return null;
			} else {
				return q.encoderType;
			}
		}),type_EncoderType);
		enct.show = false;
		enct.shortName = "EncT";
		enct.shortLabels.set(type_EncoderType.Unknown,"");
		enct.shortLabels.set(type_EncoderType.Knob,"K");
		enct.shortLabels.set(type_EncoderType.Wheel,"W");
		this.addColumn(enct);
		irCol = new table_IntRangeColumn("Trackballs",new table_FancyField("trackballs",function(q,wantSet,setValue) {
			if(wantSet) {
				q.trackballs = setValue;
				return null;
			} else {
				return q.trackballs;
			}
		}));
		this.addColumn(irCol);
		irCol.show = false;
		irCol.filterMinDefault = 1;
		var col = new table_FloatColumn("Trackball size",new table_FancyField("trackballSize",function(q,wantSet,setValue) {
			if(wantSet) {
				q.trackballSize = setValue;
				return null;
			} else {
				return q.trackballSize;
			}
		}));
		this.addColumn(col);
		col.filterName = col.name + " (mm)";
		col.show = false;
		irCol = new table_IntRangeColumn("Touchpads",new table_FancyField("trackpads",function(q,wantSet,setValue) {
			if(wantSet) {
				q.trackpads = setValue;
				return null;
			} else {
				return q.trackpads;
			}
		}));
		this.addColumn(irCol);
		irCol.show = false;
		irCol.filterMinDefault = 1;
		col = new table_FloatColumn("Touchpad size",new table_FancyField("trackpadSize",function(q,wantSet,setValue) {
			if(wantSet) {
				q.trackpadSize = setValue;
				return null;
			} else {
				return q.trackpadSize;
			}
		}));
		this.addColumn(col);
		col.filterName = col.name + " (mm)";
		col.show = false;
		irCol = new table_IntRangeColumn("Trackpoints",new table_FancyField("trackpoints",function(q,wantSet,setValue) {
			if(wantSet) {
				q.trackpoints = setValue;
				return null;
			} else {
				return q.trackpoints;
			}
		}));
		this.addColumn(irCol);
		irCol.filterMinDefault = 1;
		irCol.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"Those little pointing sticks. Usually found somewhere between the keys.");
		};
		irCol.show = false;
		irCol = new table_IntRangeColumn("D-pads",new table_FancyField("dpads",function(q,wantSet,setValue) {
			if(wantSet) {
				q.dpads = setValue;
				return null;
			} else {
				return q.dpads;
			}
		}));
		this.addColumn(irCol);
		irCol.show = false;
		irCol.filterMinDefault = 1;
		irCol.onNotes = function(div) {
			div.appendChild(window.document.createTextNode("Due to component diversity, anything that has 2 or more clicky " + "directional inputs counts as a dpad."));
		};
		col = new table_IntRangeColumn("D-pad directions",new table_FancyField("dpadDirs",function(q,wantSet,setValue) {
			if(wantSet) {
				q.dpadDirs = setValue;
				return null;
			} else {
				return q.dpadDirs;
			}
		}));
		this.addColumn(col);
		col.show = false;
		col.onNotes = function(div) {
			div.appendChild(window.document.createTextNode("If it's 3, it's probably a so-called rocker switch."));
		};
	}
	,initConveniences: function(kb) {
		var _gthis = this;
		var header = this.addFilterHeader("Conveniences");
		var col;
		var palm = new table_TagListColumn("Palm/wrist pads",new table_FancyField("wristPads",function(q,wantSet,setValue) {
			if(wantSet) {
				q.wristPads = setValue;
				return null;
			} else {
				return q.wristPads;
			}
		}),type_WristPads);
		palm.show = false;
		palm.shortLabels.set(type_WristPads.None,"");
		palm.shortLabels.set(type_WristPads.Integrated,"+");
		palm.shortLabels.set(type_WristPads.Detachable,"±");
		palm.filterTags = [type_WristPads.Integrated,type_WristPads.Detachable];
		palm.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"Palm/wrist pads aren't very common on custom keyboards, but you can always buy them" + " separately, or use any other semi-soft object of your choice" + " (such as a folded little towel or a Purple Squishy)","Some people argue that making your own palm rest is often preferable as you can" + " pick the height/firmness.");
		};
		this.addColumn(palm);
		var irCol = new table_IntRangeColumn("Tilt",new table_FancyField("tilt",function(q,wantSet,setValue) {
			if(wantSet) {
				q.tilt = setValue;
				return null;
			} else {
				return q.tilt;
			}
		}));
		this.addColumn(irCol);
		irCol.suffix = "°";
		irCol.show = false;
		irCol.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"Measured in degrees, approximately (unless specified by author/manufacturer).","Positive values mean that the back edge of the keyboard is positioned higher than" + " the front edge relative to the surface it's sitting on.","A range usually means that keyboard has a pair (or few) legs on front/back.","Not filled out for keywell keyboards since this doesn't make sense there.","If the keyboard has no legs, you can always add your own - adhesive legs for laptops" + " work perfectly well for keyboards too.");
		};
		irCol = new table_IntRangeColumn("Tenting",new table_FancyField("tenting",function(q,wantSet,setValue) {
			if(wantSet) {
				q.tenting = setValue;
				return null;
			} else {
				return q.tenting;
			}
		}));
		this.addColumn(irCol);
		irCol.suffix = "°";
		irCol.show = false;
		irCol.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"Some keyboards have an integrated system to raise the middle part of the keyboard" + " to keep palms at a more natural angle - usually either holes for tenting-legs" + " or magnets hidden in the bottom plate.");
			_gthis.addImagePara(div,"high-stakes-tenting.jpg",450,244,"30mm vs 15mm tenting legs on ErgoHaven's K:02");
			tools_HtmlTools.appendParaTextNode(div,"Measured in degrees, approximately (unless specified by author/manufacturer).","Much like with above, you can always make up for this yourself.");
		};
		var ctCol = new table_TagListColumn("Case",new table_FancyField("caseType",function(q,wantSet,setValue) {
			if(wantSet) {
				q.caseType = setValue;
				return null;
			} else {
				return q.caseType;
			}
		}),type_CaseType);
		ctCol.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"For pre-built/kit keyboards, Included means that it comes with the keyboard.","For open-source keyboards, Included means that case files can be found in the repo.","Third-party means that cases can be found or bought elsewhere.");
		};
		ctCol.shortName = "Case";
		ctCol.shortLabels.set(type_CaseType.Unknown,"");
		ctCol.shortLabels.set(type_CaseType.None,"-");
		ctCol.shortLabels.set(type_CaseType.Included,"+");
		ctCol.shortLabels.set(type_CaseType.ThirdParty,"3p");
		ctCol.filterTags = [type_CaseType.Included,type_CaseType.ThirdParty];
		ctCol.show = false;
		this.addColumn(ctCol);
		var xCol = new table_LinkListColumn("Extras",new table_FancyField("extras",function(q,wantSet,setValue) {
			if(wantSet) {
				q.extras = setValue;
				return null;
			} else {
				return q.extras;
			}
		}));
		xCol.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"Cases, tenting kits, and so on");
		};
		xCol.show = false;
		xCol.shortName = "xt";
		this.addColumn(xCol);
	}
	,initCuriosities: function(kb) {
		this.addFilterHeader("Other curiosities");
		var col = new table_IntRangeColumn("Displays",new table_FancyField("displays",function(q,wantSet,setValue) {
			if(wantSet) {
				q.displays = setValue;
				return null;
			} else {
				return q.displays;
			}
		}));
		this.addColumn(col);
		col.show = false;
		var fw = new table_TagListColumn("Firmware",new table_FancyField("firmware",function(q,wantSet,setValue) {
			if(wantSet) {
				q.firmware = setValue;
				return null;
			} else {
				return q.firmware;
			}
		}),type_Firmware);
		fw.shortLabels.set(type_Firmware.Unknown,"");
		fw.shortLabels.set(type_Firmware.Custom,"");
		fw.show = false;
		this.addColumn(fw);
		var sw = new table_TagListColumn("Software",new table_FancyField("software",function(q,wantSet,setValue) {
			if(wantSet) {
				q.software = setValue;
				return null;
			} else {
				return q.software;
			}
		}),type_Software);
		sw.show = false;
		this.addColumn(sw);
		var asm = new table_TagListColumn("Assembly specifics",new table_FancyField("assembly",function(q,wantSet,setValue) {
			if(wantSet) {
				q.assembly = setValue;
				return null;
			} else {
				return q.assembly;
			}
		}),type_Assembly);
		asm.defaultValue = [];
		asm.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"Assume keyboards to have PCBs unless specified otherwise.");
			tools_HtmlTools.appendParaTextNode(div,"If a keyboard is marked as both PCB and handwire, it has two versions.");
		};
		asm.shortName = "Assembly";
		asm.show = false;
		this.addColumn(asm);
	}
	,initLinks: function(kb) {
		var header = this.addFilterHeader("Links");
		header.editorNotes.push(new table_FancyHeaderNote("Notes on link lists",function(el) {
			var p = tools_HtmlTools.appendParaTextNode(el,"Links can be prefixed with a ");
			tools_HtmlTools.appendElTextNode(p,"code","[country code]");
			p.appendChild(window.document.createTextNode(" to indicate where a keyboard ships from - e.g."));
			var url = "https://yal.cc";
			tools_HtmlTools.appendElTextNode(el,"pre","[UA] " + url);
			p = tools_HtmlTools.appendParaTextNode(el,"Would display as ");
			p.innerHTML += table_LinkListColumn.createFlag("UA") + "&#8201;";
			var a = tools_HtmlTools.appendElTextNode(p,"a",url);
			a.setAttribute("href",url);
			p.appendChild(window.document.createTextNode("."));
			p = tools_HtmlTools.appendParaTextNode(el,"If a company has multiple regional branches," + " several codes can be appended one after another (e.g. ");
			tools_HtmlTools.appendElTextNode(p,"code","[US][DE] https://...");
			p.appendChild(window.document.createTextNode(")."));
			p = tools_HtmlTools.appendParaTextNode(el,"If the designer/company behind the keyboard" + " sells pre-builts/kits themselves OR endorses a specific vendor" + " on the project's page, such vendor links can be prefixed with a ");
			tools_HtmlTools.appendElTextNode(p,"code","!");
			p.appendChild(window.document.createTextNode(" to mark them accordingly and display them on top of the shuffled list."));
		}));
		var lc = new table_LinkListColumn("Website",new table_FancyField("web",function(q,wantSet,setValue) {
			if(wantSet) {
				q.web = setValue;
				return null;
			} else {
				return q.web;
			}
		}));
		this.addColumn(lc);
		lc.onNotes = function(div) {
			tools_HtmlTools.appendParaTextNode(div,"If a keyboard has a separate page/website/post explaining the project motivation/etc." + " that's different from the rest of the links, that goes here.");
		};
		lc.shortName = "web";
		lc.canShowSingle = true;
		lc = new table_LinkListColumn("Open-source",new table_FancyField("source",function(q,wantSet,setValue) {
			if(wantSet) {
				q.source = setValue;
				return null;
			} else {
				return q.source;
			}
		}));
		this.addColumn(lc);
		lc.shortName = "OSH";
		lc.canShowSingle = true;
		lc = new table_LinkListColumn("Kits",new table_FancyField("kit",function(q,wantSet,setValue) {
			if(wantSet) {
				q.kit = setValue;
				return null;
			} else {
				return q.kit;
			}
		}));
		this.addColumn(lc);
		lc.shortName = "Kit";
		lc = new table_LinkListColumn("Pre-built",new table_FancyField("prebuilt",function(q,wantSet,setValue) {
			if(wantSet) {
				q.prebuilt = setValue;
				return null;
			} else {
				return q.prebuilt;
			}
		}));
		this.addColumn(lc);
		lc.shortName = "PB";
	}
});
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	table_LinkListColumn.domainCountries = window.domainCountries;
	table_LinkListColumn.countryTags = window.countryTags;
	var divFilters = window.document.querySelector("#filter");
	var csTable = new ColStagTable();
	var tmp = window.document.querySelector("#count");
	csTable.countElement = tmp;
	csTable.buildFilters(divFilters);
	csTable.buildTable(window.document.querySelector("#data"));
	table_FancyTableEditor.build(csTable,window.document.querySelector("#editor"),window.document.querySelector("#editor-load"),window.document.querySelector("#editor-reset"),window.document.querySelector("#editor-build"),window.document.querySelector("#editor-test"),window.document.querySelector("#editor-output"));
	var loc = window.document.location;
	if(loc.protocol != "file:") {
		csTable.baseURL = loc.origin + loc.pathname;
	}
	var btClearFilters = window.document.querySelector("#clear-filters");
	btClearFilters.onclick = function() {
		var cbs = tools_HtmlTools.querySelectorAllAutoArr(divFilters,"input.cb-filter");
		var update = false;
		csTable.canUpdateFilters = false;
		var _g = 0;
		while(_g < cbs.length) {
			var el = cbs[_g];
			++_g;
			if(el.checked) {
				update = true;
				el.checked = false;
				tools_HtmlTools.triggerChange(el);
			}
		}
		csTable.canUpdateFilters = true;
		if(update) {
			csTable.updateFilters();
		}
	};
	var cbAutoUpdateURL = window.document.querySelector("#auto-update-url");
	csTable.canUpdateURL = cbAutoUpdateURL.checked;
	cbAutoUpdateURL.addEventListener("change",function(_) {
		csTable.canUpdateURL = cbAutoUpdateURL.checked;
	});
	var btShare = window.document.querySelector("#copy-share-url");
	var this1 = { };
	this1["theme"] = "translucent";
	var shareOpt = this1;
	shareOpt["trigger"] = "manual";
	shareOpt["content"] = "Copied!";
	var shareTippy = Tippy(btShare,shareOpt);
	var shareTippyHide = 0;
	btShare.onclick = function() {
		var search = csTable.saveFilters();
		var url = csTable.baseURL + search;
		var fallback = function() {
			window.prompt("Failed to copy - here's your link:",url);
		};
		try {
			$global.navigator.clipboard.writeText(url).catch(function(e) {
				$global.console.error("Failed to copy",e);
				fallback();
			}).then(function(_) {
				shareTippy["show"]();
				if(shareTippyHide != 0) {
					window.clearTimeout(shareTippyHide);
				}
				shareTippyHide = window.setTimeout(function() {
					shareTippyHide = 0;
					shareTippy["hide"]();
				},1200);
			});
		} catch( _g ) {
			var x = haxe_Exception.caught(_g).unwrap();
			$global.console.error("Failed to copy",x);
			fallback();
		}
	};
	var shuffler = new table_FancyTableShuffler("");
	if($global.location.hostname == "localhost") {
		var editorDetails = window.document.querySelector("#editor-outer");
		editorDetails.open = true;
	} else {
		csTable.sortBy(shuffler,false);
	}
	window.document.querySelector("#shuffle").onclick = function() {
		if(csTable.sortColHead != null) {
			csTable.sortColHead.element.classList.remove("sort-column");
			csTable.sortColHead.element.classList.remove("sort-ascending");
			csTable.sortColHead = null;
		}
		csTable.sortBy(shuffler,false);
		csTable.updateURL();
	};
	csTable.loadFilters(window.document.location.search);
};
Math.__name__ = true;
var OrthoBoards = function() { };
OrthoBoards.__name__ = true;
OrthoBoards.init = function(keyboards) {
	var add = function(kb) {
		kb.stagger = kb.stagger != null ? kb.stagger : type_StaggerType.Ortho;
		kb.shape = kb.shape != null ? kb.shape : type_ValList.fromValue(type_Shape.Split);
		keyboards.push(kb);
	};
	var pimoroniSize = 4.4;
	var addSimplyKeeb = function(kb) {
		ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
		ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(60),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
		ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(3),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromInt(3));
		ColStagKeyboard.setQMK(kb,type_ValList.fromValue(type_Software.Vial));
		add(kb);
	};
	var kb = { name : "simplyKeeb 60K", source : type_ValList.fromValue("https://github.com/geaz/simplyKeeb-60K"), img : type_ValList.fromValue("simplyKeeb-60K.jpg")};
	addSimplyKeeb(kb);
	kb = { name : "simplyKeeb 60Kph", source : type_ValList.fromValue("https://github.com/geaz/simplyKeeb-60K/tree/main/printedmx"), assembly : type_ValList.fromValue(type_Assembly.Handwired), img : type_ValList.fromValue("simplyKeeb-60K.jpg"), notes : type_ValList.fromValue("Like the regular simplyKeeb 60K, but fully 3d-printable.")};
	addSimplyKeeb(kb);
	kb = { name : "Skywatch"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(36),type_NumRange.fromInt(5),type_NumRange.fromInt(3));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(3));
	kb.shape = type_ValList.fromValue(type_Shape.Unibody);
	kb.pinkyStagger = 0.3;
	kb.stagger = type_StaggerType.Ortho;
	kb.trackballSize = pimoroniSize;
	kb.trackballs = type_NumRange.fromArray([0,1]);
	kb.source = type_ValList.fromValue("https://github.com/ozkan/skywatch");
	kb.img = type_ValList.fromValue("Skywatch.jpg");
	add(kb);
	kb = { name : "Bancouver40"};
	kb.shape = type_ValList.fromValue(type_Shape.Monoblock);
	kb.stagger = type_StaggerType.Ortho;
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(40),type_NumRange.fromInt(5),type_NumRange.fromInt(3));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(3),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromInt(4));
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc),type_KeySpacing.CFX);
	kb.source = type_ValList.fromValue("https://github.com/ChrisChrisLoLo/bancouver40");
	kb.img = type_ValList.fromValue("Bancouver40.jpeg");
	add(kb);
	kb = { name : "ChocV"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(36),type_NumRange.fromInt(5),type_NumRange.fromInt(3));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(3));
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc),type_KeySpacing.Choc);
	kb.splay = type_SplayBase.PinkyOnly;
	kb.shape = type_ValList.fromValue(type_Shape.Unibody);
	kb.stagger = type_StaggerType.Ortho;
	kb.source = type_ValList.fromValue("https://github.com/ImStuBTW/chonkv");
	kb.img = type_ValList.fromValue("ChocV.jpg");
	add(kb);
	kb = { name : "ChonkV"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(58),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(5));
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.Choc),type_KeySpacing.Choc);
	kb.splay = type_SplayBase.PinkyOnly;
	kb.shape = type_ValList.fromValue(type_Shape.Unibody);
	kb.stagger = type_StaggerType.Ortho;
	kb.source = type_ValList.fromValue("https://github.com/ImStuBTW/chonkv");
	kb.img = type_ValList.fromValue("ChonkV.jpg");
	add(kb);
	kb = { name : "BFO-9000"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromArray([56,108]),type_NumRange.fromArray([7,9]),type_NumRange.fromArray([3,5]));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(4),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromInt(4));
	kb.switchProfile = [type_SwitchProfile.MX,type_SwitchProfile.Choc,type_SwitchProfile.Alps];
	kb.shape = type_ValList.fromValue(type_Shape.Split);
	kb.stagger = type_StaggerType.Ortho;
	kb.kit = type_ValList.fromValue("!https://keeb.io/collections/split-keyboard-parts/products/bfo-9000-keyboard-customizable-full-size-split-ortholinear");
	kb.img = type_ValList.fromValue("bfo-9000.jpg");
	add(kb);
	kb = { name : "Ergo42"};
	kb.stagger = type_StaggerType.Ortho;
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(56),type_NumRange.fromInt(7),type_NumRange.fromInt(3));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(3),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromInt(4));
	ColStagKeyboard.setQMK(kb);
	kb.switchProfile = [type_SwitchProfile.MX,type_SwitchProfile.Choc];
	kb.source = type_ValList.fromValue("https://github.com/Biacco42/Ergo42");
	kb.img = type_ValList.fromValue("ergo42.jpg");
	add(kb);
	kb = { name : "Kong"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromArray([48,60]),type_NumRange.fromInt(5),type_NumRange.fromInt(3));
	ColStagKeyboard.setHotswap(kb,[type_SwitchProfile.MX,type_SwitchProfile.Choc],type_KeySpacing.MX);
	kb.shape = type_ValList.fromValue(type_Shape.Unibody);
	kb.rcols = type_NumRange.fromInt(8);
	ColStagKeyboard.setExtras(kb,type_NumRange.fromArray([3,4]),type_NumRange.fromArray([3,4]),type_NumRange.fromInt(0),type_NumRange.fromInt(3));
	ColStagKeyboard.setQMK(kb,type_ValList.fromValue(type_Software.Vial));
	kb.source = type_ValList.fromValue("https://github.com/weteor/ChonkyKong");
	kb.img = type_ValList.fromValue("chonkyKong.jpg");
	kb.notes = type_ValList.fromValue("Doesn't fit very well with the existing classification system.");
	add(kb);
	kb = { name : "Buran"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(39),type_NumRange.fromInt(5),type_NumRange.fromInt(3));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(3),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromInt(3));
	ColStagKeyboard.setHotswap(kb,[type_SwitchProfile.MX,type_SwitchProfile.Choc]);
	ColStagKeyboard.setQMK(kb,type_ValList.fromValue(type_Software.Vial));
	kb.shape = type_ValList.fromValue(type_Shape.Unibody);
	kb.encoders = type_NumRange.fromInt(1);
	kb.source = type_ValList.fromValue("https://github.com/ScatteredDrifter/Buran-Ortho");
	kb.img = type_ValList.fromValue("buran-no-acryl-isp.jpg");
	add(kb);
	kb = { name : "Helix"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(64),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(4),type_NumRange.fromInt(1),type_NumRange.fromInt(0),type_NumRange.fromInt(4));
	ColStagKeyboard.setHotswap(kb,[type_SwitchProfile.MX,type_SwitchProfile.Choc]);
	kb.source = type_ValList.fromValue("https://github.com/MakotoKurauchi/helix");
	kb.kit = ["!https://shop.yushakobo.jp/en/products/2143","https://mechboards.co.uk/products/helix-kit","https://customkbd.com/collections/split-keyboards/products/helix-kit","https://keyhive.xyz/shop/helix-kit","https://www.switchtop.com/product/helix-keyboard-kit","https://www.littlekeyboards.com/collections/helix-pcb-kits"];
	kb.img = type_ValList.fromValue("helix.webp");
	add(kb);
	kb = { name : "Viterbi"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(70),type_NumRange.fromInt(7),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(4),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromInt(4));
	ColStagKeyboard.setHotswap(kb,[type_SwitchProfile.MX,type_SwitchProfile.Alps]);
	kb.kit = type_ValList.fromValue("https://keeb.io/products/viterbi-keyboard-pcbs-5x7-70-split-ortholinear");
	kb.img = type_ValList.fromValue("viterbi.webp");
	add(kb);
	var addRebound = function(kb) {
		ColStagKeyboard.setMatrix(kb,type_NumRange.fromArray([42,50]),type_NumRange.fromInt(6),type_NumRange.fromInt(3));
		ColStagKeyboard.setExtras(kb,type_NumRange.fromArray([2,4]),type_NumRange.fromInt(0),type_NumRange.fromInt(0),type_NumRange.fromArray([1,4]));
		ColStagKeyboard.setHotswap(kb,[type_SwitchProfile.MX,type_SwitchProfile.Choc]);
		kb.caseType = type_ValList.fromValue(type_CaseType.Included);
		kb.encoders = type_NumRange.fromInt(1);
		add(kb);
	};
	kb = { name : "Rebound"};
	kb.stagger = type_StaggerType.Ortho;
	kb.shape = type_ValList.fromValue(type_Shape.Unibody);
	kb.kit = type_ValList.fromValue("!https://store.montsinger.net/products/rebound");
	kb.img = type_ValList.fromValue("rebound.webp");
	addRebound(kb);
	kb = { name : "Rebound-S"};
	kb.stagger = type_StaggerType.Column;
	kb.shape = type_ValList.fromValue(type_Shape.Unibody);
	kb.kit = type_ValList.fromValue("!https://store.montsinger.net/products/rebound-s");
	kb.img = type_ValList.fromValue("rebound-s.webp");
	addRebound(kb);
	kb = { name : "Sol 3"};
	ColStagKeyboard.setMatrix(kb,type_NumRange.fromInt(66),type_NumRange.fromInt(6),type_NumRange.fromInt(4));
	ColStagKeyboard.setExtras(kb,type_NumRange.fromInt(3),type_NumRange.fromInt(4),type_NumRange.fromInt(0),type_NumRange.fromInt(5));
	ColStagKeyboard.setHotswap(kb,type_ValList.fromValue(type_SwitchProfile.MX));
	kb.kit = type_ValList.fromValue("https://www.rgbkb.net/collections/sol-3");
	kb.prebuilt = type_ValList.fromValue("https://www.rgbkb.net/collections/sol-3/products/sol-3-keyboard-prebuilt");
	kb.img = type_ValList.fromValue("sol3.webp");
	add(kb);
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
Type.__name__ = true;
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c;
	var _g = e.__constructs__[index];
	if(_g == null) {
		c = null;
	} else {
		var ctor = _g;
		c = ctor._hx_name;
	}
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var externs_TippyOptions = {};
externs_TippyOptions._new = function() {
	var this1 = { };
	this1["theme"] = "translucent";
	return this1;
};
externs_TippyOptions.bind = function(this1,el) {
	Tippy(el,this1);
};
externs_TippyOptions.setLazyContent = function(this1,fn) {
	var ready = false;
	var v = function(tippy) {
		if(!ready) {
			ready = true;
			var content = fn();
			tippy["setContent"](content);
		}
	};
	this1["onShow"] = v;
};
externs_TippyOptions.setHoverOnly = function(this1,fn) {
	this1["onShow"] = fn;
	this1["touch"] = false;
};
externs_TippyOptions.setClickTap = function(this1,click,tap,wantClick) {
	this1["trigger"] = "click";
	var _tap = tap;
	var block = false;
	if(click == null) {
		click = function(t,e) {
		};
	}
	if(tap == null) {
		tap = function(t) {
		};
	}
	if(wantClick == null) {
		wantClick = function(t,e) {
			return !Tippy["currentInput"]["isTouch"];
		};
	}
	var v = function(t,e) {
		block = wantClick(t,e);
		if(!block) {
			return;
		}
		click(t,e);
	};
	this1["onTrigger"] = v;
	var v = function(t) {
		if(block) {
			return false;
		}
		var val = _tap(t);
		if(val != null) {
			return val;
		} else {
			return true;
		}
	};
	this1["onShow"] = v;
};
externs_TippyOptions._preventDefault = function(t,e) {
	e.preventDefault();
};
externs_TippyOptions.setContextMenu = function(this1,show) {
	this1["trigger"] = "contextmenu";
	var v = externs_TippyOptions._preventDefault;
	this1["onTrigger"] = v;
	this1["onShow"] = show;
};
externs_TippyOptions._body = function() {
	return window.document.body;
};
externs_TippyOptions.setInteractiveSafe = function(this1) {
	this1["interactive"] = true;
	var v = externs_TippyOptions._body;
	this1["appendTo"] = v;
};
externs_TippyOptions.get_theme = function(this1) {
	return this1["theme"];
};
externs_TippyOptions.set_theme = function(this1,v) {
	this1["theme"] = v;
	return v;
};
externs_TippyOptions.get_interactive = function(this1) {
	return this1["interactive"];
};
externs_TippyOptions.set_interactive = function(this1,v) {
	this1["interactive"] = v;
	return v;
};
externs_TippyOptions.get_content = function(this1) {
	return this1["content"];
};
externs_TippyOptions.set_content = function(this1,v) {
	this1["content"] = v;
	return v;
};
externs_TippyOptions.get_trigger = function(this1) {
	return this1["trigger"];
};
externs_TippyOptions.set_trigger = function(this1,v) {
	this1["trigger"] = v;
	return v;
};
externs_TippyOptions.get_touch = function(this1) {
	return this1["touch"];
};
externs_TippyOptions.set_touch = function(this1,v) {
	this1["touch"] = v;
	return v;
};
externs_TippyOptions.get_onTrigger = function(this1) {
	return this1["onTrigger"];
};
externs_TippyOptions.set_onTrigger = function(this1,v) {
	this1["onTrigger"] = v;
	return v;
};
externs_TippyOptions.get_onShow = function(this1) {
	return this1["onShow"];
};
externs_TippyOptions.set_onShow = function(this1,v) {
	this1["onShow"] = v;
	return v;
};
externs_TippyOptions.get_placement = function(this1) {
	return this1["placement"];
};
externs_TippyOptions.set_placement = function(this1,v) {
	this1["placement"] = v;
	return v;
};
externs_TippyOptions.get_maxWidth = function(this1) {
	return this1["maxWidth"];
};
externs_TippyOptions.set_maxWidth = function(this1,v) {
	this1["maxWidth"] = v;
	return v;
};
externs_TippyOptions.get_appendTo = function(this1) {
	return this1["appendTo"];
};
externs_TippyOptions.set_appendTo = function(this1,v) {
	this1["appendTo"] = v;
	return v;
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
});
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var table_FancyColumn = function(name) {
	this.canSort = false;
	this.nullCaption = "";
	this.filterCheckbox = null;
	this.wantFilter = false;
	this.canFilter = true;
	this.show = true;
	this.onNotes = null;
	this.shortName = null;
	this.filterName = null;
	this.table = null;
	this.name = name;
};
table_FancyColumn.__name__ = true;
table_FancyColumn.prototype = {
	getId: function() {
		return this.name;
	}
	,buildValue: function(out,kb) {
	}
	,buildFilter: function(out) {
	}
	,buildEditor: function(out,store,restore) {
	}
	,matchesFilter: function(kb) {
		return true;
	}
	,saveFilterParams: function(obj) {
	}
	,loadFilterParams: function(obj) {
		return false;
	}
	,compareKeyboards: function(a,b,ascending) {
		return 0;
	}
	,save: function(kb) {
	}
	,load: function(kb) {
	}
};
var table_FancyField = function(name,access) {
	this.name = name;
	this.access = access;
};
table_FancyField.__name__ = true;
var table_FancyRow = function(kb) {
	this.cells = [];
	var _gthis = this;
	this.keyboard = kb;
	this.element = window.document.createElement("tr");
	this.element.addEventListener("click",function(_) {
		var cur = _gthis.element.parentElement.querySelector("tr.latest");
		if(cur != null) {
			cur.classList.remove("latest");
		}
		_gthis.element.classList.add("latest");
	});
};
table_FancyRow.__name__ = true;
var table_FancyTableCellBase = function(col) {
	this.column = col;
};
table_FancyTableCellBase.__name__ = true;
var table_FancyTableCell = function(col) {
	table_FancyTableCellBase.call(this,col);
	this.element = window.document.createElement("td");
};
table_FancyTableCell.__name__ = true;
table_FancyTableCell.__super__ = table_FancyTableCellBase;
table_FancyTableCell.prototype = $extend(table_FancyTableCellBase.prototype,{
});
var table_FancyTableHeaderCell = function(col) {
	table_FancyTableCellBase.call(this,col);
	this.element = window.document.createElement("th");
};
table_FancyTableHeaderCell.__name__ = true;
table_FancyTableHeaderCell.__super__ = table_FancyTableCellBase;
table_FancyTableHeaderCell.prototype = $extend(table_FancyTableCellBase.prototype,{
});
var table_FancyTableFilterOrder = $hxEnums["table.FancyTableFilterOrder"] = { __ename__:true,__constructs__:null
	,Column: ($_=function(col) { return {_hx_index:0,col:col,__enum__:"table.FancyTableFilterOrder",toString:$estr}; },$_._hx_name="Column",$_.__params__ = ["col"],$_)
	,Header: ($_=function(h) { return {_hx_index:1,h:h,__enum__:"table.FancyTableFilterOrder",toString:$estr}; },$_._hx_name="Header",$_.__params__ = ["h"],$_)
};
table_FancyTableFilterOrder.__constructs__ = [table_FancyTableFilterOrder.Column,table_FancyTableFilterOrder.Header];
var table_FancyFilterHeader = function(text) {
	this.editorNotes = [];
	this.filterNotes = [];
	this.text = text;
};
table_FancyFilterHeader.__name__ = true;
var table_FancyHeaderNote = function(text,func) {
	this.text = text;
	this.func = func;
};
table_FancyHeaderNote.__name__ = true;
var table_FancyTableEditor = function() { };
table_FancyTableEditor.__name__ = true;
table_FancyTableEditor.build = function(table,out,ddLoad,btReset,btBuild,btTest,fdJSON) {
	var dest = out;
	var store = [];
	var restore = [];
	var _g = 0;
	var _g1 = table.filterOrder;
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		var column;
		switch(item._hx_index) {
		case 0:
			var col = item.col;
			column = col;
			break;
		case 1:
			var header = item.h;
			var details = window.document.createElement("details");
			details.open = true;
			var summary = window.document.createElement("summary");
			var text = header.text;
			summary.appendChild(window.document.createTextNode(text));
			details.appendChild(summary);
			out.appendChild(details);
			dest = details;
			var _g2 = 0;
			var _g3 = header.editorNotes;
			while(_g2 < _g3.length) {
				var note = _g3[_g2];
				++_g2;
				var div = tools_HtmlTools.appendElTextNode(details,"div","");
				div.classList.add("note");
				var notice = tools_HtmlTools.appendElTextNode(div,"span",note.text);
				table_FancyTableFilters.addNotesFor(note.func,notice);
			}
			continue;
		}
		var tr = window.document.createElement("div");
		tr.classList.add("item");
		var divFilters = window.document.createElement("div");
		column.buildEditor(divFilters,store,restore);
		divFilters.classList.add("filters");
		var meta = window.document.createElement("div");
		meta.classList.add("name");
		var tmp = column.filterName;
		var colName = tmp != null ? tmp : column.name;
		var colNameEl = window.document.createElement("span");
		colNameEl.appendChild(window.document.createTextNode(colName));
		colNameEl.classList.add("column-name");
		table_FancyTableFilters.addNotes(column,colNameEl);
		meta.appendChild(colNameEl);
		meta.appendChild(divFilters);
		tr.appendChild(meta);
		dest.appendChild(tr);
	}
	var buildKeyboard = function() {
		var kb = { };
		var _g = 0;
		while(_g < store.length) {
			var fn = store[_g];
			++_g;
			fn(kb);
		}
		var _g = 0;
		var _g1 = table.columns;
		while(_g < _g1.length) {
			var col = _g1[_g];
			++_g;
			col.save(kb);
		}
		return kb;
	};
	btBuild.onclick = function() {
		var kb = buildKeyboard();
		fdJSON.value = JSON.stringify(kb,null,"\t");
	};
	btReset.onclick = function() {
		if(!window.confirm("Are you sure that you want to reset all fields? This cannot be undone!")) {
			return;
		}
		out.reset();
	};
	var kbs = table.keyboards;
	kbs.sort(function(a,b) {
		var an = a.name.toUpperCase();
		var bn = b.name.toUpperCase();
		if(an < bn) {
			return -1;
		} else {
			return 1;
		}
	});
	var _g = 0;
	while(_g < kbs.length) {
		var kb = kbs[_g];
		++_g;
		var option = window.document.createElement("option");
		var text = kb.name;
		option.appendChild(window.document.createTextNode(text));
		ddLoad.appendChild(option);
	}
	ddLoad.onchange = function() {
		if(ddLoad.value == "") {
			return;
		}
		var name = ddLoad.value;
		if(!window.confirm("Are you sure that you want to replace fields with those of \"" + name + "\"? This cannot be undone!")) {
			return;
		}
		ddLoad.value = "";
		var _g = [];
		var _g1 = 0;
		var _g2 = table.keyboards;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(v.name == name) {
				_g.push(v);
			}
		}
		var kb = _g[0];
		if(kb == null) {
			return;
		}
		var _g = 0;
		while(_g < restore.length) {
			var fn = restore[_g];
			++_g;
			fn(kb);
		}
	};
	btTest.onclick = function() {
		table.loadTest(buildKeyboard());
	};
};
var table_FancyTableFilters = function() { };
table_FancyTableFilters.__name__ = true;
table_FancyTableFilters.addNotesFor = function(onNotes,el) {
	if(onNotes != null) {
		el.classList.add("has-notes");
		el.title = "(click to view notes)";
		var this1 = { };
		this1["theme"] = "translucent";
		var opts = this1;
		opts["trigger"] = "click";
		opts["interactive"] = true;
		var v = function() {
			return el.parentElement;
		};
		opts["appendTo"] = v;
		opts["maxWidth"] = 480;
		externs_TippyOptions.setLazyContent(opts,function() {
			var div = window.document.createElement("div");
			onNotes(div);
			return div;
		});
		Tippy(el,opts);
	}
};
table_FancyTableFilters.addNotes = function(column,el) {
	table_FancyTableFilters.addNotesFor(column.onNotes,el);
};
table_FancyTableFilters.build = function(table,out) {
	var dest = out;
	var _g = 0;
	var _g1 = table.filterOrder;
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		var column;
		switch(item._hx_index) {
		case 0:
			var col = item.col;
			column = col;
			break;
		case 1:
			var header = item.h;
			var text = header.text;
			var details = window.document.createElement("details");
			details.open = true;
			var summary = window.document.createElement("summary");
			summary.appendChild(window.document.createTextNode(text));
			details.appendChild(summary);
			out.appendChild(details);
			dest = details;
			var _g2 = 0;
			var _g3 = header.filterNotes;
			while(_g2 < _g3.length) {
				var note = _g3[_g2];
				++_g2;
				var div = tools_HtmlTools.appendElTextNode(details,"div","");
				div.classList.add("note");
				var notice = tools_HtmlTools.appendElTextNode(div,"span",note.text);
				table_FancyTableFilters.addNotesFor(note.func,notice);
			}
			continue;
		}
		var column1 = [column];
		var tmp = column1[0].filterName;
		var colName = tmp != null ? tmp : column1[0].name;
		var tr = window.document.createElement("div");
		tr.classList.add("item");
		var cbShow = window.document.createElement("input");
		cbShow.type = "checkbox";
		cbShow.classList.add("cb-show");
		cbShow.checked = column1[0].show;
		cbShow.onchange = (function(column) {
			return function(_) {
				column[0].show = !column[0].show;
				var _g = 0;
				var _g1 = [];
				var _g2 = 0;
				var _g3 = table.header.cells;
				while(_g2 < _g3.length) {
					var v = _g3[_g2];
					++_g2;
					if(v.column == column[0]) {
						_g1.push(v);
					}
				}
				var _g2 = _g1;
				while(_g < _g2.length) {
					var cell = _g2[_g];
					++_g;
					tools_HtmlTools.setDisplayFlag(cell.element,column[0].show);
				}
				var _g = 0;
				var _g1 = table.rows;
				while(_g < _g1.length) {
					var row = _g1[_g];
					++_g;
					var _g2 = 0;
					var _g3 = [];
					var _g4 = 0;
					var _g5 = row.cells;
					while(_g4 < _g5.length) {
						var v = _g5[_g4];
						++_g4;
						if(v.column == column[0]) {
							_g3.push(v);
						}
					}
					var _g6 = _g3;
					while(_g2 < _g6.length) {
						var cell = _g6[_g2];
						++_g2;
						tools_HtmlTools.setDisplayFlag(cell.element,column[0].show);
					}
				}
			};
		})(column1);
		tr.appendChild(cbShow);
		var this1 = { };
		this1["theme"] = "translucent";
		var toShow = this1;
		var v = "Show \"" + colName + "\"";
		toShow["content"] = v;
		Tippy(cbShow,toShow);
		var divFilters = [window.document.createElement("div")];
		column1[0].buildFilter(divFilters[0]);
		tools_HtmlTools.setDisplayFlag(divFilters[0],false);
		divFilters[0].classList.add("filters");
		var cbFilter = [window.document.createElement("input")];
		cbFilter[0].type = "checkbox";
		cbFilter[0].classList.add("cb-filter");
		cbFilter[0].checked = false;
		cbFilter[0].disabled = !column1[0].canFilter;
		cbFilter[0].onchange = (function(cbFilter,divFilters,column) {
			return function(_) {
				column[0].wantFilter = cbFilter[0].checked;
				tools_HtmlTools.setDisplayFlag(divFilters[0],cbFilter[0].checked);
				table.updateFilters();
			};
		})(cbFilter,divFilters,column1);
		column1[0].filterCheckbox = cbFilter[0];
		tr.appendChild(cbFilter[0]);
		var this2 = { };
		this2["theme"] = "translucent";
		var toFilter = this2;
		var v1 = "Filter \"" + colName + "\"";
		toFilter["content"] = v1;
		Tippy(cbFilter[0],toFilter);
		var meta = window.document.createElement("div");
		meta.classList.add("name");
		var colNameEl = window.document.createElement("span");
		colNameEl.appendChild(window.document.createTextNode(colName));
		colNameEl.classList.add("column-name");
		table_FancyTableFilters.addNotes(column1[0],colNameEl);
		meta.appendChild(colNameEl);
		meta.appendChild(divFilters[0]);
		tr.appendChild(meta);
		dest.appendChild(tr);
	}
};
var table_FancyTableShuffler = function(name) {
	table_FancyColumn.call(this,name);
};
table_FancyTableShuffler.__name__ = true;
table_FancyTableShuffler.__super__ = table_FancyColumn;
table_FancyTableShuffler.prototype = $extend(table_FancyColumn.prototype,{
	compareKeyboards: function(a,b,ascending) {
		if(Math.random() < 0.5) {
			return -1;
		} else {
			return 1;
		}
	}
});
var table_NumberColumnBase = function(name) {
	this.suffix = "";
	this.filterIncludeNullCheckbox = null;
	this.filterIncludeNullLabel = null;
	this.filterIncludeNull = false;
	this.filterMaxCheckbox = null;
	this.filterMaxField = null;
	this.filterMaxDefault = null;
	this.filterMax = null;
	this.filterMinCheckbox = null;
	this.filterMinField = null;
	this.filterMinDefault = null;
	this.filterMin = null;
	table_FancyColumn.call(this,name);
	this.canSort = true;
};
table_NumberColumnBase.__name__ = true;
table_NumberColumnBase.__super__ = table_FancyColumn;
table_NumberColumnBase.prototype = $extend(table_FancyColumn.prototype,{
	getId: function() {
		return this.field.name;
	}
	,parseFilterValue: function(val) {
		return null;
	}
	,getKnownRange: function(keyboards) {
		return null;
	}
	,buildFilter: function(out) {
		var _gthis = this;
		var knownRange = this.getKnownRange(this.table.keyboards);
		if(knownRange != null) {
			tools_HtmlTools.appendDivTextNode(out,"Available range: " + type_NumRange.toString(knownRange));
		}
		var _g = 0;
		while(_g < 2) {
			var step = _g++;
			var isMin = [step == 0];
			var startVal = isMin[0] ? _gthis.filterMin : _gthis.filterMax;
			var fd = [window.document.createElement("input")];
			if(isMin[0]) {
				fd[0].id = this.field.name + "-min";
				this.filterMinField = fd[0];
			} else {
				fd[0].id = this.field.name + "-max";
				this.filterMaxField = fd[0];
			}
			fd[0].type = "number";
			if(knownRange != null) {
				if(isMin[0]) {
					var tmp = this.filterMinDefault;
					fd[0].value = "" + Std.string(tmp != null ? tmp : knownRange.min);
				} else {
					var tmp1 = this.filterMaxDefault;
					fd[0].value = "" + Std.string(tmp1 != null ? tmp1 : knownRange.max);
				}
			}
			fd[0].disabled = startVal == null;
			if(startVal != null) {
				fd[0].value = "" + Std.string(startVal);
			}
			var setValue = [(function(isMin) {
				return function(val) {
					var old = isMin[0] ? _gthis.filterMin : _gthis.filterMax;
					if(old != val) {
						if(isMin[0]) {
							_gthis.filterMin = val;
						} else {
							_gthis.filterMax = val;
						}
						_gthis.table.updateFilters();
					}
				};
			})(isMin)];
			var setFdValue = [(function(setValue,fd) {
				return function() {
					var val = _gthis.parseFilterValue(fd[0].value);
					tools_HtmlTools.setAttributeFlag(fd[0],"invalid",val == null);
					setValue[0](val);
				};
			})(setValue,fd)];
			fd[0].onchange = (function(setFdValue) {
				return function(_) {
					setFdValue[0]();
				};
			})(setFdValue);
			fd[0].onkeydown = (function(setFdValue) {
				return function(_) {
					setFdValue[0]();
				};
			})(setFdValue);
			fd[0].onkeyup = (function(setFdValue) {
				return function(_) {
					setFdValue[0]();
				};
			})(setFdValue);
			var cb = [tools_HtmlTools.createCheckboxElement(window.document)];
			cb[0].checked = startVal != null;
			cb[0].onchange = (function(cb,setFdValue,setValue,fd) {
				return function(_) {
					fd[0].disabled = !cb[0].checked;
					if(cb[0].checked) {
						setFdValue[0]();
					} else {
						setValue[0](null);
					}
				};
			})(cb,setFdValue,setValue,fd);
			if(isMin[0]) {
				this.filterMinCheckbox = cb[0];
				cb[0].id = this.field.name + "-min-cb";
			} else {
				this.filterMaxCheckbox = cb[0];
				cb[0].id = this.field.name + "-max-cb";
			}
			var lb = window.document.createElement("label");
			lb.appendChild(cb[0]);
			lb.appendChild(window.document.createTextNode((isMin[0] ? "min" : "max") + ": "));
			var div = window.document.createElement("div");
			div.appendChild(lb);
			div.appendChild(fd[0]);
			out.appendChild(div);
		}
		if(this.filterIncludeNullLabel != null) {
			var cb1 = tools_HtmlTools.createCheckboxElement(window.document);
			cb1.checked = this.filterIncludeNull;
			cb1.id = this.field.name + "-null-cb";
			cb1.onchange = function(_) {
				_gthis.filterIncludeNull = cb1.checked;
				_gthis.table.updateFilters();
			};
			this.filterIncludeNullCheckbox = cb1;
			var lb = window.document.createElement("label");
			lb.appendChild(cb1);
			var text = this.filterIncludeNullLabel;
			lb.appendChild(window.document.createTextNode(text));
			var div = window.document.createElement("div");
			div.appendChild(lb);
			out.appendChild(div);
		}
	}
	,saveFilterParams: function(out) {
		if(this.filterMin != null && this.filterMax != null) {
			out[this.field.name] = Std.string(this.filterMin) + "~" + Std.string(this.filterMax);
		} else {
			if(this.filterMin != null) {
				out[this.field.name + "-min"] = "" + Std.string(this.filterMin);
			}
			if(this.filterMax != null) {
				out[this.field.name + "-max"] = "" + Std.string(this.filterMax);
			}
		}
		if(this.filterIncludeNullLabel != null && this.filterIncludeNull) {
			out[this.field.name + "-null"] = "";
		}
	}
	,loadFilterParams: function(obj) {
		var ret = false;
		var val = obj[this.field.name];
		if(val != null) {
			ret = true;
			var pos = val.indexOf("~");
			var minv;
			var maxv;
			if(pos >= 0) {
				minv = val.substring(0,pos);
				maxv = val.substring(pos + 1);
			} else {
				minv = val;
				maxv = val;
			}
			this.filterMinCheckbox.checked = true;
			tools_HtmlTools.triggerChange(this.filterMinCheckbox);
			this.filterMinField.value = minv;
			tools_HtmlTools.triggerChange(this.filterMinField);
			this.filterMaxCheckbox.checked = true;
			tools_HtmlTools.triggerChange(this.filterMaxCheckbox);
			this.filterMaxField.value = maxv;
			tools_HtmlTools.triggerChange(this.filterMaxField);
		} else {
			val = obj[this.field.name + "-min"];
			this.filterMinCheckbox.checked = val != null;
			tools_HtmlTools.triggerChange(this.filterMinCheckbox);
			if(val != null) {
				ret = true;
				this.filterMinField.value = val;
				tools_HtmlTools.triggerChange(this.filterMinField);
			}
			val = obj[this.field.name + "-max"];
			this.filterMaxCheckbox.checked = val != null;
			tools_HtmlTools.triggerChange(this.filterMaxCheckbox);
			if(val != null) {
				ret = true;
				this.filterMaxField.value = val;
				tools_HtmlTools.triggerChange(this.filterMaxField);
			}
		}
		if(this.filterIncludeNullCheckbox != null) {
			val = obj[this.field.name + "-null"];
			this.filterIncludeNullCheckbox.checked = val != null;
			tools_HtmlTools.triggerChange(this.filterIncludeNullCheckbox);
			if(val != null) {
				ret = true;
			}
		}
		return ret;
	}
});
var table_NumberColumn = function(name,field) {
	this.defaultValue = 0;
	table_NumberColumnBase.call(this,name);
	this.field = field;
};
table_NumberColumn.__name__ = true;
table_NumberColumn.parseIntValue = function(val) {
	if(val == null) {
		return null;
	}
	return Std.parseInt(val);
};
table_NumberColumn.parseFloatValue = function(val) {
	if(val == null) {
		return null;
	}
	val = StringTools.replace(val,",",".");
	var f = parseFloat(val);
	if(isNaN(f)) {
		return null;
	}
	return f;
};
table_NumberColumn.compareValues = function(a,b) {
	if(a < b) {
		return -1;
	}
	if(a > b) {
		return 1;
	}
	return 0;
};
table_NumberColumn.__super__ = table_NumberColumnBase;
table_NumberColumn.prototype = $extend(table_NumberColumnBase.prototype,{
	getKnownRange: function(keyboards) {
		var min = null;
		var max = null;
		var _g = 0;
		while(_g < keyboards.length) {
			var keyboard = keyboards[_g];
			++_g;
			var val = this.field.access(keyboard);
			if(val != null) {
				if(min == null || val < min) {
					min = val;
				}
				if(max == null || val > max) {
					max = val;
				}
			}
		}
		if(min != null) {
			return { min : min, max : max};
		} else {
			return null;
		}
	}
	,buildValue: function(out,kb) {
		var val = this.field.access(kb);
		var text = val != null ? "" + Std.string(val) : this.nullCaption;
		out.appendChild(window.document.createTextNode(text));
	}
	,buildEditor: function(out,store,restore) {
		var _gthis = this;
		var fd = window.document.createElement("input");
		fd.type = "number";
		fd.onchange = function() {
			var val = _gthis.parseFilterValue(fd.value);
			tools_HtmlTools.setAttributeFlag(fd,"invalid",fd.value != "" && val == null);
		};
		out.appendChild(fd);
		store.push(function(kb) {
			var val = _gthis.parseFilterValue(fd.value);
			if(val != null) {
				_gthis.field.access(kb,true,val);
			}
		});
		restore.push(function(kb) {
			var val = _gthis.field.access(kb);
			fd.value = val != null ? "" + Std.string(val) : "";
		});
	}
	,matchesFilter: function(kb) {
		var val = this.field.access(kb);
		if(val == null) {
			if(this.filterIncludeNull) {
				return true;
			}
			val = this.defaultValue;
		}
		if(this.filterMin != null && val < this.filterMin) {
			return false;
		}
		if(this.filterMax != null && val > this.filterMax) {
			return false;
		}
		return true;
	}
	,compareKeyboards: function(a,b,ascending) {
		var tmp = this.field.access(a);
		var av = tmp != null ? tmp : this.defaultValue;
		var tmp = this.field.access(b);
		var bv = tmp != null ? tmp : this.defaultValue;
		if(ascending) {
			return table_NumberColumn.compareValues(av,bv);
		}
		return table_NumberColumn.compareValues(bv,av);
	}
});
var table_FloatColumn = function(name,field) {
	table_NumberColumn.call(this,name,field);
};
table_FloatColumn.__name__ = true;
table_FloatColumn.__super__ = table_NumberColumn;
table_FloatColumn.prototype = $extend(table_NumberColumn.prototype,{
	parseFilterValue: function(val) {
		return table_NumberColumn.parseFloatValue(val);
	}
});
var table_NumberListColumn = function(name,field) {
	this.defaultValue = [];
	table_NumberColumnBase.call(this,name);
	this.field = field;
};
table_NumberListColumn.__name__ = true;
table_NumberListColumn.__super__ = table_NumberColumnBase;
table_NumberListColumn.prototype = $extend(table_NumberColumnBase.prototype,{
	getKnownRange: function(keyboards) {
		var min = null;
		var max = null;
		var _g = 0;
		while(_g < keyboards.length) {
			var keyboard = keyboards[_g];
			++_g;
			var list = this.field.access(keyboard);
			if(list != null) {
				var _g1 = 0;
				var _g2 = list;
				while(_g1 < _g2.length) {
					var val = _g2[_g1];
					++_g1;
					if(min == null || val < min) {
						min = val;
					}
					if(max == null || val > max) {
						max = val;
					}
				}
			}
		}
		if(min != null) {
			return { min : min, max : max};
		} else {
			return null;
		}
	}
	,buildValue: function(out,kb) {
		var val = this.field.access(kb);
		var text = val != null && val.length > 0 ? val.join(" ") : this.nullCaption;
		out.appendChild(window.document.createTextNode(text));
	}
	,matchesFilter: function(kb) {
		var vals = this.field.access(kb);
		if(vals == null) {
			if(this.filterIncludeNull) {
				return true;
			}
			vals = this.defaultValue;
		}
		var _g = 0;
		var _g1 = vals;
		while(_g < _g1.length) {
			var val = _g1[_g];
			++_g;
			if(this.filterMin != null && val < this.filterMin) {
				continue;
			}
			if(this.filterMax != null && val > this.filterMax) {
				continue;
			}
			return true;
		}
		if(this.filterMin == null) {
			return this.filterMax == null;
		} else {
			return false;
		}
	}
	,compareKeyboards: function(a,b,ascending) {
		var tmp = this.field.access(a);
		var al = tmp != null ? tmp : [];
		var tmp = this.field.access(b);
		var bl = tmp != null ? tmp : [];
		var am = null;
		var bm = null;
		if(ascending) {
			var _g = 0;
			while(_g < al.length) {
				var v = al[_g];
				++_g;
				if(am == null || v < am) {
					am = v;
				}
			}
			var _g = 0;
			while(_g < bl.length) {
				var v = bl[_g];
				++_g;
				if(bm == null || v < bm) {
					bm = v;
				}
			}
			if(am == null) {
				if(bm == null) {
					return 0;
				} else {
					return -1;
				}
			}
			if(bm == null) {
				return 1;
			}
			return table_NumberColumn.compareValues(am,bm);
		} else {
			var _g = 0;
			while(_g < al.length) {
				var v = al[_g];
				++_g;
				if(am == null || v > am) {
					am = v;
				}
			}
			var _g = 0;
			while(_g < bl.length) {
				var v = bl[_g];
				++_g;
				if(bm == null || v > bm) {
					bm = v;
				}
			}
			if(am == null) {
				if(bm == null) {
					return 0;
				} else {
					return 1;
				}
			}
			if(bm == null) {
				return -1;
			}
			return table_NumberColumn.compareValues(bm,am);
		}
	}
});
var table_IntListColumn = function(name,field) {
	table_NumberListColumn.call(this,name,field);
};
table_IntListColumn.__name__ = true;
table_IntListColumn.__super__ = table_NumberListColumn;
table_IntListColumn.prototype = $extend(table_NumberListColumn.prototype,{
	parseFilterValue: function(val) {
		return table_NumberColumn.parseIntValue(val);
	}
});
var table_NumberRangeColumn = function(name,field) {
	this.defaultValue = { min : 0, max : 0};
	table_NumberColumnBase.call(this,name);
	this.field = field;
};
table_NumberRangeColumn.__name__ = true;
table_NumberRangeColumn.__super__ = table_NumberColumnBase;
table_NumberRangeColumn.prototype = $extend(table_NumberColumnBase.prototype,{
	getKnownRange: function(keyboards) {
		var min = null;
		var max = null;
		var _g = 0;
		while(_g < keyboards.length) {
			var keyboard = keyboards[_g];
			++_g;
			var range = this.field.access(keyboard);
			if(range != null) {
				if(min == null || range.min < min) {
					min = range.min;
				}
				if(max == null || range.max > max) {
					max = range.max;
				}
			}
		}
		if(min != null) {
			return { min : min, max : max};
		} else {
			return null;
		}
	}
	,buildFilter: function(out) {
		this.filterIncludeNull = false;
		table_NumberColumnBase.prototype.buildFilter.call(this,out);
	}
	,buildValue: function(out,kb) {
		var range = this.field.access(kb);
		var text = range != null ? type_NumRange.toString(range) + this.suffix : this.nullCaption;
		out.appendChild(window.document.createTextNode(text));
		out.title = [kb.name,this.name + ":",text].join("\n");
	}
	,matchesFilter: function(kb) {
		var tmp = this.field.access(kb);
		var val = tmp != null ? tmp : this.defaultValue;
		if(this.filterMin != null && val.max < this.filterMin) {
			return false;
		}
		if(this.filterMax != null && val.min > this.filterMax) {
			return false;
		}
		return true;
	}
	,compareKeyboards: function(a,b,ascending) {
		var tmp = this.field.access(a);
		var ar = tmp != null ? tmp : this.defaultValue;
		var tmp = this.field.access(b);
		var br = tmp != null ? tmp : this.defaultValue;
		if(ascending) {
			return table_NumberColumn.compareValues(ar.min,br.min);
		} else {
			return table_NumberColumn.compareValues(br.max,ar.max);
		}
	}
	,buildEditor: function(out,store,restore) {
		var _gthis = this;
		var fds = [];
		out.classList.add("range");
		var fd = window.document.createElement("input");
		fd.type = "number";
		fd.onchange = function() {
			var val = _gthis.parseFilterValue(fd.value);
			tools_HtmlTools.setAttributeFlag(fd,"invalid",fd.value != "" && val == null);
		};
		fd.placeholder = "min";
		fds.push(fd);
		out.appendChild(fd);
		var text = String.fromCodePoint(160) + ".." + String.fromCodePoint(160);
		out.appendChild(window.document.createTextNode(text));
		var fd1 = window.document.createElement("input");
		fd1.type = "number";
		fd1.onchange = function() {
			var val = _gthis.parseFilterValue(fd1.value);
			tools_HtmlTools.setAttributeFlag(fd1,"invalid",fd1.value != "" && val == null);
		};
		fd1.placeholder = "max";
		fds.push(fd1);
		out.appendChild(fd1);
		store.push(function(kb) {
			var min = _gthis.parseFilterValue(fds[0].value);
			var max = _gthis.parseFilterValue(fds[1].value);
			if(min == null && max == null) {
				return;
			}
			if(max == null) {
				max = min;
			} else if(min == null) {
				min = max;
			}
			_gthis.field.access(kb,true,{ min : min, max : max});
		});
		restore.push(function(kb) {
			var range = _gthis.field.access(kb);
			if(range == null) {
				fds[0].value = "";
				fds[1].value = "";
			} else {
				fds[0].value = "" + Std.string(range.min);
				fds[1].value = range.max != range.min ? "" + Std.string(range.max) : "";
			}
		});
	}
	,save: function(kb) {
		var val = this.field.access(kb);
		if(val != null && val.min == val.max) {
			this.field.access(kb,true,val.min);
		}
	}
	,load: function(kb) {
		var val = this.field.access(kb);
		if(((val) instanceof Array)) {
			var arr = val;
			this.field.access(kb,true,{ min : arr[0], max : arr[1]});
		} else if(typeof(val) == "number") {
			var num = val;
			this.field.access(kb,true,{ min : num, max : num});
		}
	}
});
var table_IntRangeColumn = function(name,field) {
	table_NumberRangeColumn.call(this,name,field);
};
table_IntRangeColumn.__name__ = true;
table_IntRangeColumn.__super__ = table_NumberRangeColumn;
table_IntRangeColumn.prototype = $extend(table_NumberRangeColumn.prototype,{
	parseFilterValue: function(val) {
		return table_NumberColumn.parseIntValue(val);
	}
});
var table_LinkListColumn = function(name,field) {
	this.defaultValue = "";
	this.canShowSingle = false;
	table_FancyColumn.call(this,name);
	this.field = field;
};
table_LinkListColumn.__name__ = true;
table_LinkListColumn.createFlag = function(origin) {
	var html = table_LinkListColumn.countryTags[origin.toUpperCase()];
	if(html == null) {
		var code = origin.toLowerCase();
		var bit = "<img src=\"flags/" + code + ".png\"";
		var title = "Unknown origin \"" + origin + "\"";
		if(title != null) {
			bit += " title=\"" + StringTools.htmlEscape(title,true) + "\"";
		}
		return bit + " class=\"flag\" />";
	}
	html = html.replace(table_LinkListColumn.rxFlag,function(_,code,title) {
		var bit = "<img src=\"flags/" + code + ".png\"";
		if(title != null) {
			bit += " title=\"" + title + "\"";
		}
		return bit + " class=\"flag\" />";
	});
	return html;
};
table_LinkListColumn.__super__ = table_FancyColumn;
table_LinkListColumn.prototype = $extend(table_FancyColumn.prototype,{
	getId: function() {
		return this.field.name;
	}
	,matchesFilter: function(kb) {
		var lines = this.field.access(kb);
		if(lines != null) {
			return lines.length != 0;
		} else {
			return false;
		}
	}
	,buildPopup: function(lines) {
		var list = window.document.createElement("ul");
		lines.sort(function(a,b) {
			if(StringTools.startsWith(a,"!")) {
				return -1;
			}
			if(StringTools.startsWith(b,"!")) {
				return 1;
			}
			if(Math.random() < 0.5) {
				return -1;
			} else {
				return 1;
			}
		});
		var _g_current = 0;
		var _g_array = lines;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var href = _g_value;
			var item = window.document.createElement("li");
			var link = window.document.createElement("a");
			var official = StringTools.startsWith(href,"!");
			if(official) {
				href = StringTools.ltrim(HxOverrides.substr(href,1,null));
			}
			var origins = [];
			var _g = 0;
			while(_g < 16) {
				var _ = _g++;
				if(!StringTools.startsWith(href,"[")) {
					break;
				}
				var pos = href.indexOf("]");
				if(pos < 0) {
					break;
				}
				if(href.charAt(pos + 1) == "(") {
					break;
				}
				origins.push(href.substring(1,pos));
				href = href.substring(pos + 1);
			}
			var url = new URL(href);
			var domain = url.hostname;
			if(StringTools.startsWith(domain,"www.")) {
				domain = HxOverrides.substr(domain,4,null);
			}
			if(origins.length == 0) {
				var origin = table_LinkListColumn.domainCountries[domain];
				if(origin == null) {
					var parts = domain.split(".");
					if(parts.length >= 3) {
						origin = table_LinkListColumn.domainCountries[parts.slice(1).join(".")];
					}
				}
				if(origin == null) {
					var pos1 = domain.lastIndexOf(".");
					if(pos1 >= 0) {
						origin = domain.substring(pos1 + 1).toUpperCase();
						if(table_LinkListColumn.countryTags[origin] == null) {
							origin = null;
						}
					}
				}
				if(origin != null) {
					origins.push(origin);
				}
			}
			if(official) {
				item.innerHTML += "<img src=\"flags/star.png\" title=\"Official\" class=\"flag\" >&#8201;";
			}
			var _g1 = 0;
			while(_g1 < origins.length) {
				var origin1 = origins[_g1];
				++_g1;
				var html = table_LinkListColumn.createFlag(origin1);
				item.innerHTML += html + "&#8201;";
			}
			link.href = href;
			link.appendChild(window.document.createTextNode(domain));
			item.appendChild(link);
			list.appendChild(item);
		}
		return list;
	}
	,buildValue: function(out,kb) {
		var _gthis = this;
		var lines = this.field.access(kb);
		if(!(lines == null || lines.length == 0)) {
			if(lines.length == 1 && this.canShowSingle) {
				var link = window.document.createElement("a");
				link.appendChild(window.document.createTextNode("➜"));
				link.href = lines[0];
				out.appendChild(link);
			} else {
				var link = window.document.createElement("a");
				link.appendChild(window.document.createTextNode("➜"));
				link.href = "javascript:void(0)";
				out.appendChild(link);
				var this1 = { };
				this1["theme"] = "translucent";
				var opts = this1;
				opts["trigger"] = "click";
				opts["interactive"] = true;
				var v = function() {
					return out;
				};
				opts["appendTo"] = v;
				externs_TippyOptions.setLazyContent(opts,function() {
					return _gthis.buildPopup(lines);
				});
				Tippy(link,opts);
			}
		}
		out.title = [kb.name,this.name + " (" + (lines != null ? lines.length : 0) + ")"].join("\n");
	}
	,buildEditor: function(out,store,restore) {
		var _gthis = this;
		var textarea = window.document.createElement("textarea");
		textarea.placeholder = ["One URL per line"].join("\n");
		out.appendChild(textarea);
		store.push(function(kb) {
			var text = textarea.value;
			if(StringTools.trim(text) == "") {
				return;
			}
			_gthis.field.access(kb,true,text.split("\n"));
		});
		restore.push(function(kb) {
			var arr = _gthis.field.access(kb);
			if(arr == null) {
				textarea.value = "";
			} else {
				textarea.value = arr.join("\n");
			}
		});
	}
	,save: function(kb) {
		var arr = this.field.access(kb);
		if(arr != null && arr.length == 1) {
			arr = arr[0];
			this.field.access(kb,true,arr);
		}
	}
	,load: function(kb) {
		var val = this.field.access(kb);
		if(typeof(val) == "string") {
			this.field.access(kb,true,[val]);
		}
	}
	,saveFilterParams: function(obj) {
		if(this.filterCheckbox.checked) {
			obj[this.field.name] = "";
		}
	}
	,loadFilterParams: function(obj) {
		return obj[this.field.name] != null;
	}
});
var table_NameColumn = function(name,field) {
	table_FancyColumn.call(this,name);
	this.field = field;
	this.canFilter = false;
	this.canSort = true;
};
table_NameColumn.__name__ = true;
table_NameColumn.__super__ = table_FancyColumn;
table_NameColumn.prototype = $extend(table_FancyColumn.prototype,{
	buildValue: function(out,kb) {
		if(kb.img != null || kb.notes != null) {
			var srcs;
			if(kb.img != null) {
				var rxLink = new RegExp("^https?://","");
				var _this = kb.img;
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					var s = _this[i];
					result[i] = rxLink.test(s) ? s : "img/" + s;
				}
				srcs = result;
			} else {
				srcs = null;
			}
			var link = window.document.createElement("a");
			var text = this.field.access(kb);
			link.appendChild(window.document.createTextNode(text));
			link.href = srcs != null ? srcs[0] : null;
			link.onclick = function() {
				return false;
			};
			out.appendChild(link);
			var this1 = { };
			this1["theme"] = "translucent";
			var opts = this1;
			opts["trigger"] = "click";
			opts["interactive"] = true;
			opts["maxWidth"] = 640;
			externs_TippyOptions.setLazyContent(opts,function() {
				var div = window.document.createElement("div");
				if(srcs != null) {
					var _g = 0;
					while(_g < srcs.length) {
						var src = srcs[_g];
						++_g;
						var img = window.document.createElement("img");
						img.src = src;
						var p = window.document.createElement("p");
						p.classList.add("img");
						p.appendChild(img);
						div.appendChild(p);
					}
				}
				if(kb.notes != null) {
					var _g = 0;
					var _g1 = kb.notes;
					while(_g < _g1.length) {
						var note = _g1[_g];
						++_g;
						tools_HtmlTools.appendParaTextNode(div,note);
					}
				}
				return div;
			});
			Tippy(link,opts);
		} else {
			var text = this.field.access(kb);
			out.appendChild(window.document.createTextNode(text));
		}
	}
	,compareKeyboards: function(a,b,ascending) {
		var an = this.field.access(a).toUpperCase();
		var bn = this.field.access(b).toUpperCase();
		var sign = an == bn ? 0 : an < bn ? -1 : 1;
		if(ascending) {
			sign = -sign;
		}
		return sign;
	}
	,buildEditor: function(out,store,restore) {
		var fd = window.document.createElement("input");
		fd.type = "text";
		store.push(function(kb) {
			kb.name = fd.value;
		});
		restore.push(function(kb) {
			fd.value = kb.name;
		});
		fd.placeholder = "Cool Keyboard";
		out.appendChild(fd);
		out.appendChild(window.document.createElement("br"));
		var textarea = window.document.createElement("textarea");
		textarea.style.marginTop = "0.25em";
		textarea.placeholder = "one image URL per line";
		out.appendChild(textarea);
		store.push(function(kb) {
			var text = textarea.value;
			if(StringTools.trim(text) == "") {
				return;
			}
			kb.img = text.split("\n");
		});
		restore.push(function(kb) {
			var arr = kb.img;
			if(arr == null) {
				textarea.value = "";
			} else {
				textarea.value = arr.join("\n");
			}
		});
		var notes = window.document.createElement("textarea");
		notes.style.marginTop = "0.25em";
		notes.placeholder = "One paragraph of notes per line";
		out.appendChild(notes);
		store.push(function(kb) {
			var text = notes.value;
			if(StringTools.trim(text) == "") {
				return;
			}
			kb.notes = text.split("\n");
		});
		restore.push(function(kb) {
			var arr = kb.notes;
			if(arr == null) {
				notes.value = "";
			} else {
				notes.value = arr.join("\n");
			}
		});
	}
	,save: function(kb) {
		var arr = kb.img;
		if(arr != null && arr.length == 1) {
			arr = arr[0];
			kb.img = arr;
		}
		arr = kb.notes;
		if(arr != null && arr.length == 1) {
			arr = arr[0];
			kb.notes = arr;
		}
	}
	,load: function(kb) {
		if(typeof(kb.img) == "string") {
			kb.img = [kb.img];
		}
		if(typeof(kb.notes) == "string") {
			kb.notes = [kb.notes];
		}
	}
});
var table_TagColumnBase = function(name,et) {
	this.filterModeSelect = null;
	this.filterMode = table_TagFilterMode.AnyOf;
	this.isMulti = false;
	this.filterCheckboxes = [];
	this.filterTags = [];
	this.shortLabels = new haxe_ds_EnumValueMap();
	this.filterLabels = new haxe_ds_EnumValueMap();
	table_FancyColumn.call(this,name);
	this.type = et;
};
table_TagColumnBase.__name__ = true;
table_TagColumnBase.__super__ = table_FancyColumn;
table_TagColumnBase.prototype = $extend(table_FancyColumn.prototype,{
	getId: function() {
		return this.field.name;
	}
	,buildFilter: function(out) {
		var _gthis = this;
		var modeSelect = window.document.createElement("select");
		var _g = 0;
		var _this = table_TagFilterMode.__constructs__;
		var result = new Array(_this.length);
		var _g1 = 0;
		var _g2 = _this.length;
		while(_g1 < _g2) {
			var i = _g1++;
			result[i] = _this[i]._hx_name;
		}
		var _g1 = result;
		while(_g < _g1.length) {
			var ctr = _g1[_g];
			++_g;
			var val = Type.createEnum(table_TagFilterMode,ctr,null);
			var name;
			switch(val._hx_index) {
			case 0:
				name = "Any of these";
				break;
			case 1:
				if(!this.isMulti) {
					continue;
				}
				name = "All of these";
				break;
			case 2:
				name = "None of these";
				break;
			}
			var opt = window.document.createElement("option");
			opt.value = ctr;
			opt.appendChild(window.document.createTextNode(name));
			if(val == table_TagFilterMode.AnyOf) {
				opt.selected = true;
			}
			modeSelect.appendChild(opt);
		}
		modeSelect.onchange = function(_) {
			var old = _gthis.filterMode;
			var tmp = Type.createEnum(table_TagFilterMode,modeSelect.value,null);
			_gthis.filterMode = tmp != null ? tmp : table_TagFilterMode.AnyOf;
			if(old != _gthis.filterMode) {
				_gthis.table.updateFilters();
			}
		};
		this.filterModeSelect = modeSelect;
		out.appendChild(modeSelect);
		var _g = 0;
		var _this = this.type.__constructs__;
		var result = new Array(_this.length);
		var _g1 = 0;
		var _g2 = _this.length;
		while(_g1 < _g2) {
			var i = _g1++;
			result[i] = _this[i]._hx_name;
		}
		var _g1 = result;
		while(_g < _g1.length) {
			var ctr = _g1[_g];
			++_g;
			var val = [Type.createEnum(this.type,ctr)];
			var tmp = this.filterLabels.get(val[0]);
			var name = tmp != null ? tmp : ctr;
			var cb = [tools_HtmlTools.createCheckboxElement(window.document)];
			cb[0].checked = this.filterTags.indexOf(val[0]) != -1;
			cb[0].id = this.field.name + "-" + $hxEnums[val[0].__enum__].__constructs__[val[0]._hx_index]._hx_name;
			cb[0].onchange = (function(cb,val) {
				return function(_) {
					if(cb[0].checked) {
						if(_gthis.filterTags.indexOf(val[0]) == -1) {
							_gthis.filterTags.push(val[0]);
							_gthis.table.updateFilters();
						}
					} else if(HxOverrides.remove(_gthis.filterTags,val[0])) {
						_gthis.table.updateFilters();
					}
				};
			})(cb,val);
			this.filterCheckboxes.push(cb[0]);
			var lb = window.document.createElement("label");
			lb.appendChild(cb[0]);
			lb.appendChild(window.document.createTextNode(name));
			var div = window.document.createElement("div");
			div.appendChild(lb);
			out.appendChild(div);
		}
	}
	,saveFilterParams: function(obj) {
		var name = this.field.name;
		if(this.filterMode != table_TagFilterMode.AnyOf) {
			var e = this.filterMode;
			obj[name + "-mode"] = $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name;
		}
		var _this = this.filterTags;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var t = _this[i];
			result[i] = $hxEnums[t.__enum__].__constructs__[t._hx_index]._hx_name;
		}
		var list = result;
		if(list.length > 0) {
			obj[name] = list.join("~");
		}
	}
	,loadFilterParams: function(obj) {
		var name = this.field.name;
		var mode = obj[name + "-mode"];
		var ret = false;
		if(mode != null) {
			try {
				this.filterMode = Type.createEnum(table_TagFilterMode,mode,null);
				this.filterModeSelect.value = mode;
				tools_HtmlTools.triggerChange(this.filterModeSelect);
				ret = true;
			} catch( _g ) {
				$global.console.error("Invalid filter mode " + mode + " for " + name);
			}
		}
		var listStr = obj[name];
		if(listStr != null) {
			var list = listStr.split("~");
			var _g = 0;
			var _g1 = this.filterCheckboxes;
			while(_g < _g1.length) {
				var cb = _g1[_g];
				++_g;
				cb.checked = false;
				tools_HtmlTools.triggerChange(cb);
			}
			var _g = 0;
			while(_g < list.length) {
				var item = list[_g];
				++_g;
				var _g1 = [];
				var _g2 = 0;
				var _g3 = this.filterCheckboxes;
				while(_g2 < _g3.length) {
					var v = _g3[_g2];
					++_g2;
					if(v.id == name + "-" + item) {
						_g1.push(v);
					}
				}
				var cb = _g1[0];
				if(cb != null) {
					cb.checked = true;
					tools_HtmlTools.triggerChange(cb);
					ret = true;
				}
			}
		}
		return ret;
	}
});
var table_TagColumn = function(name,field,et) {
	this.defaultValue = null;
	table_TagColumnBase.call(this,name,et);
	this.defaultValue = Type.createEnumIndex(et,0,null);
	this.field = field;
	this.type = et;
};
table_TagColumn.__name__ = true;
table_TagColumn.__super__ = table_TagColumnBase;
table_TagColumn.prototype = $extend(table_TagColumnBase.prototype,{
	getValue: function(kb) {
		var tmp = this.field.access(kb);
		if(tmp != null) {
			return tmp;
		} else {
			return this.defaultValue;
		}
	}
	,buildValue: function(out,kb) {
		var val = this.getValue(kb);
		if(val != null) {
			var name = $hxEnums[val.__enum__].__constructs__[val._hx_index]._hx_name;
			var tmp = this.shortLabels.get(val);
			out.appendChild(window.document.createTextNode(tmp != null ? tmp : name));
			var kb1 = kb.name;
			var tmp = this.name + ":";
			var tmp1 = this.filterLabels.get(val);
			out.title = [kb1,tmp,tmp1 != null ? tmp1 : name].join("\n");
		} else {
			var text = this.nullCaption;
			out.appendChild(window.document.createTextNode(text));
		}
	}
	,buildEditor: function(out,store,restore) {
		var _gthis = this;
		var select = window.document.createElement("select");
		var _this = this.type.__constructs__;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i]._hx_name;
		}
		var ctrs = [""].concat(result);
		var _g = 0;
		while(_g < ctrs.length) {
			var ctr = ctrs[_g];
			++_g;
			var name;
			if(ctr != "") {
				var val = Type.createEnum(this.type,ctr);
				var tmp = this.filterLabels.get(val);
				name = tmp != null ? tmp : ctr;
			} else {
				name = "";
			}
			var option = window.document.createElement("option");
			option.appendChild(window.document.createTextNode(name));
			option.value = ctr;
			select.appendChild(option);
		}
		store.push(function(kb) {
			var val = select.value;
			if(val != "") {
				_gthis.field.access(kb,true,Type.createEnum(_gthis.type,val,null));
			}
		});
		restore.push(function(kb) {
			var val = _gthis.field.access(kb);
			if(val != null) {
				select.value = $hxEnums[val.__enum__].__constructs__[val._hx_index]._hx_name;
			} else {
				select.value = "";
			}
		});
		out.appendChild(select);
	}
	,matchesFilter: function(kb) {
		if(this.filterTags.length == 0) {
			return true;
		}
		var val = this.getValue(kb);
		switch(this.filterMode._hx_index) {
		case 0:
			return this.filterTags.indexOf(val) != -1;
		case 2:
			return this.filterTags.indexOf(val) == -1;
		default:
			return true;
		}
	}
	,save: function(kb) {
		var val = this.field.access(kb);
		if(val != null) {
			this.field.access(kb,true,$hxEnums[val.__enum__].__constructs__[val._hx_index]._hx_name);
		}
	}
	,load: function(kb) {
		var val = this.field.access(kb);
		if(val != null) {
			this.field.access(kb,true,Type.createEnum(this.type,val,null));
		}
	}
});
var table_TagFilterMode = $hxEnums["table.TagFilterMode"] = { __ename__:true,__constructs__:null
	,AnyOf: {_hx_name:"AnyOf",_hx_index:0,__enum__:"table.TagFilterMode",toString:$estr}
	,AllOf: {_hx_name:"AllOf",_hx_index:1,__enum__:"table.TagFilterMode",toString:$estr}
	,NoneOf: {_hx_name:"NoneOf",_hx_index:2,__enum__:"table.TagFilterMode",toString:$estr}
};
table_TagFilterMode.__constructs__ = [table_TagFilterMode.AnyOf,table_TagFilterMode.AllOf,table_TagFilterMode.NoneOf];
var table_TagListColumn = function(name,field,et) {
	this.defaultValue = null;
	table_TagColumnBase.call(this,name,et);
	this.defaultValue = type_ValList.fromValue(Type.createEnumIndex(et,0,null));
	this.field = field;
	this.type = et;
};
table_TagListColumn.__name__ = true;
table_TagListColumn.__super__ = table_TagColumnBase;
table_TagListColumn.prototype = $extend(table_TagColumnBase.prototype,{
	getValue: function(kb) {
		var tmp = this.field.access(kb);
		if(tmp != null) {
			return tmp;
		} else {
			return this.defaultValue;
		}
	}
	,buildValue: function(out,kb) {
		var vals = this.getValue(kb);
		if(vals != null) {
			var tip = [kb.name,this.name + ":"];
			var _g_current = 0;
			var _g_array = vals;
			while(_g_current < _g_array.length) {
				var _g_value = _g_array[_g_current];
				var _g_key = _g_current++;
				var i = _g_key;
				var val = _g_value;
				if(i > 0) {
					out.appendChild(window.document.createTextNode(", "));
				}
				var name = $hxEnums[val.__enum__].__constructs__[val._hx_index]._hx_name;
				var tmp = this.shortLabels.get(val);
				out.appendChild(window.document.createTextNode(tmp != null ? tmp : name));
				var tmp1 = this.filterLabels.get(val);
				tip.push("· " + (tmp1 != null ? tmp1 : name));
			}
			out.title = tip.join("\n");
		} else {
			var text = this.nullCaption;
			out.appendChild(window.document.createTextNode(text));
		}
	}
	,buildEditor: function(out,store,restore) {
		var _gthis = this;
		var _g = 0;
		var _this = this.type.__constructs__;
		var result = new Array(_this.length);
		var _g1 = 0;
		var _g2 = _this.length;
		while(_g1 < _g2) {
			var i = _g1++;
			result[i] = _this[i]._hx_name;
		}
		var _g1 = result;
		while(_g < _g1.length) {
			var ctr = _g1[_g];
			++_g;
			var val = [Type.createEnum(this.type,ctr)];
			var tmp = this.filterLabels.get(val[0]);
			var name = tmp != null ? tmp : ctr;
			var cb = [tools_HtmlTools.createCheckboxElement(window.document)];
			store.push((function(cb,val) {
				return function(kb) {
					if(!cb[0].checked) {
						return;
					}
					var arr = _gthis.field.access(kb);
					if(arr == null) {
						arr = [];
						_gthis.field.access(kb,true,arr);
					}
					arr.push(val[0]);
				};
			})(cb,val));
			restore.push((function(cb,val) {
				return function(kb) {
					var arr = _gthis.field.access(kb);
					cb[0].checked = arr != null && arr.indexOf(val[0]) != -1;
				};
			})(cb,val));
			var label = window.document.createElement("label");
			var row = window.document.createElement("div");
			label.appendChild(cb[0]);
			label.appendChild(window.document.createTextNode(name));
			row.appendChild(label);
			out.appendChild(row);
		}
	}
	,matchesFilter: function(kb) {
		if(this.filterTags.length == 0) {
			return true;
		}
		var vals = this.getValue(kb);
		if(vals == null) {
			vals = this.defaultValue;
			if(vals == null) {
				vals = [];
			}
		}
		switch(this.filterMode._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = vals;
			while(_g < _g1.length) {
				var val = _g1[_g];
				++_g;
				if(this.filterTags.indexOf(val) != -1) {
					return true;
				}
			}
			return false;
		case 1:
			var _g = 0;
			var _g1 = vals;
			while(_g < _g1.length) {
				var val = _g1[_g];
				++_g;
				if(this.filterTags.indexOf(val) == -1) {
					return false;
				}
			}
			return true;
		case 2:
			var _g = 0;
			var _g1 = vals;
			while(_g < _g1.length) {
				var val = _g1[_g];
				++_g;
				if(this.filterTags.indexOf(val) != -1) {
					return false;
				}
			}
			return true;
		}
	}
	,save: function(kb) {
		var arr = this.field.access(kb);
		if(arr != null) {
			var result = new Array(arr.length);
			var _g = 0;
			var _g1 = arr.length;
			while(_g < _g1) {
				var i = _g++;
				var e = arr[i];
				result[i] = $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name;
			}
			var names = result;
			if(names.length == 1) {
				names = names[0];
			}
			this.field.access(kb,true,names);
		}
	}
	,load: function(kb) {
		var _gthis = this;
		var names = this.field.access(kb);
		if(names != null) {
			if(typeof(names) == "string") {
				names = [names];
			}
			var result = new Array(names.length);
			var _g = 0;
			var _g1 = names.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = Type.createEnum(_gthis.type,names[i],null);
			}
			var arr = result;
			this.field.access(kb,true,arr);
		}
	}
});
var tools_FancyTableMacro = function() { };
tools_FancyTableMacro.__name__ = true;
var tools_HtmlTools = function() { };
tools_HtmlTools.__name__ = true;
tools_HtmlTools.getElementByIdAuto = function(doc,id,c) {
	return doc.getElementById(id);
};
tools_HtmlTools.asElement = function(el) {
	return el;
};
tools_HtmlTools.querySelectorEls = function(el,selectors) {
	return el.querySelectorAll(selectors);
};
tools_HtmlTools.querySelectorAllAuto = function(el,selectors,c) {
	return el.querySelectorAll(selectors);
};
tools_HtmlTools.querySelectorAllAutoArr = function(el,selectors,c) {
	var elist = el.querySelectorAll(selectors);
	var _g = [];
	var _g1 = 0;
	while(_g1 < elist.length) {
		var el = elist[_g1];
		++_g1;
		_g.push(el);
	}
	return _g;
};
tools_HtmlTools.querySelectorAuto = function(el,selectors,c) {
	return el.querySelector(selectors);
};
tools_HtmlTools.appendTextNode = function(e,text) {
	e.appendChild(window.document.createTextNode(text));
};
tools_HtmlTools.appendLineBreak = function(e) {
	e.appendChild(window.document.createElement("br"));
};
tools_HtmlTools.appendDivTextNode = function(e,text) {
	var div = window.document.createElement("div");
	div.appendChild(window.document.createTextNode(text));
	e.appendChild(div);
	return div;
};
tools_HtmlTools.appendParaTextNode = function(e) {
	var $l=arguments.length;
	var paras = new Array($l>1?$l-1:0);
	for(var $i=1;$i<$l;++$i){paras[$i-1]=arguments[$i];}
	var result = null;
	var _g_current = 0;
	var _g_args = paras;
	while(_g_current < _g_args.length) {
		var text = _g_args[_g_current++];
		var p = window.document.createElement("p");
		p.appendChild(window.document.createTextNode(text));
		e.appendChild(p);
		if(result == null) {
			result = p;
		}
	}
	return result;
};
tools_HtmlTools.appendElTextNode = function(e,tag,text) {
	var p = window.document.createElement(tag);
	p.appendChild(window.document.createTextNode(text));
	e.appendChild(p);
	return p;
};
tools_HtmlTools.addFieldChangeEventListener = function(e,f) {
	e.addEventListener("change",f);
	e.addEventListener("keydown",function(e) {
		window.setTimeout(function() {
			f(e);
		});
	});
	e.addEventListener("keyup",f);
};
tools_HtmlTools.createFilePicker = function(accept,fn) {
	var form = window.document.createElement("form");
	form.classList.add("hidden");
	var picker = window.document.createElement("input");
	picker.type = "file";
	picker.accept = accept;
	form.appendChild(picker);
	var reset = function() {
		form.reset();
	};
	picker.onchange = function(_) {
		var _g = 0;
		var _g1 = picker.files;
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			fn(file,reset);
			break;
		}
	};
	window.document.body.appendChild(form);
	return picker;
};
tools_HtmlTools.createJsonPicker = function(fn) {
	return tools_HtmlTools.createFilePicker(".json",function(file,then) {
		var reader = new FileReader();
		reader.onload = function() {
			var text = reader.result;
			var json;
			try {
				json = JSON.parse(text);
			} catch( _g ) {
				var x = haxe_Exception.caught(_g).unwrap();
				window.alert("Invalid JSON: " + Std.string(x));
				return;
			}
			try {
				fn(json);
			} catch( _g ) {
				var x = haxe_Exception.caught(_g).unwrap();
				window.alert("Load error: " + Std.string(x));
			}
		};
		reader.onloadend = function() {
			then();
		};
		reader.readAsText(file);
	});
};
tools_HtmlTools.createCheckboxElement = function(doc) {
	var cb = doc.createElement("input");
	cb.type = "checkbox";
	return cb;
};
tools_HtmlTools.saveAs = function(data,name) {
	window['saveAs'](data,name);
};
tools_HtmlTools.saveJsonAs = function(data,name) {
	var text = JSON.stringify(data,null,"\t");
	var blob = new Blob([text]);
	window['saveAs'](blob,name);
};
tools_HtmlTools.setAttributeFlag = function(el,attr,val) {
	if(val) {
		if(!el.hasAttribute(attr)) {
			el.setAttribute(attr,"");
		}
	} else if(el.hasAttribute(attr)) {
		el.removeAttribute(attr);
	}
};
tools_HtmlTools.setTokenFlag = function(tl,name,val) {
	if(tl.contains(name) != val) {
		tl.toggle(name);
	}
};
tools_HtmlTools.setDisplayFlag = function(el,visible) {
	el.style.display = visible ? "" : "none";
};
tools_HtmlTools.triggerChange = function(el) {
	el.dispatchEvent(new CustomEvent("change"));
};
var type_Assembly = $hxEnums["type.Assembly"] = { __ename__:true,__constructs__:null
	,Unspecified: {_hx_name:"Unspecified",_hx_index:0,__enum__:"type.Assembly",toString:$estr}
	,PCB: {_hx_name:"PCB",_hx_index:1,__enum__:"type.Assembly",toString:$estr}
	,ThroughHole: {_hx_name:"ThroughHole",_hx_index:2,__enum__:"type.Assembly",toString:$estr}
	,Handwired: {_hx_name:"Handwired",_hx_index:3,__enum__:"type.Assembly",toString:$estr}
	,Adjustable: {_hx_name:"Adjustable",_hx_index:4,__enum__:"type.Assembly",toString:$estr}
};
type_Assembly.__constructs__ = [type_Assembly.Unspecified,type_Assembly.PCB,type_Assembly.ThroughHole,type_Assembly.Handwired,type_Assembly.Adjustable];
var type_CaseType = $hxEnums["type.CaseType"] = { __ename__:true,__constructs__:null
	,Unknown: {_hx_name:"Unknown",_hx_index:0,__enum__:"type.CaseType",toString:$estr}
	,None: {_hx_name:"None",_hx_index:1,__enum__:"type.CaseType",toString:$estr}
	,Included: {_hx_name:"Included",_hx_index:2,__enum__:"type.CaseType",toString:$estr}
	,ThirdParty: {_hx_name:"ThirdParty",_hx_index:3,__enum__:"type.CaseType",toString:$estr}
};
type_CaseType.__constructs__ = [type_CaseType.Unknown,type_CaseType.None,type_CaseType.Included,type_CaseType.ThirdParty];
var type_Connection = $hxEnums["type.Connection"] = { __ename__:true,__constructs__:null
	,Wired: {_hx_name:"Wired",_hx_index:0,__enum__:"type.Connection",toString:$estr}
	,Bluetooth: {_hx_name:"Bluetooth",_hx_index:1,__enum__:"type.Connection",toString:$estr}
	,Wireless: {_hx_name:"Wireless",_hx_index:2,__enum__:"type.Connection",toString:$estr}
};
type_Connection.__constructs__ = [type_Connection.Wired,type_Connection.Bluetooth,type_Connection.Wireless];
var type_EncoderType = $hxEnums["type.EncoderType"] = { __ename__:true,__constructs__:null
	,Unknown: {_hx_name:"Unknown",_hx_index:0,__enum__:"type.EncoderType",toString:$estr}
	,Knob: {_hx_name:"Knob",_hx_index:1,__enum__:"type.EncoderType",toString:$estr}
	,Wheel: {_hx_name:"Wheel",_hx_index:2,__enum__:"type.EncoderType",toString:$estr}
	,Other: {_hx_name:"Other",_hx_index:3,__enum__:"type.EncoderType",toString:$estr}
};
type_EncoderType.__constructs__ = [type_EncoderType.Unknown,type_EncoderType.Knob,type_EncoderType.Wheel,type_EncoderType.Other];
var type_Firmware = $hxEnums["type.Firmware"] = { __ename__:true,__constructs__:null
	,Unknown: {_hx_name:"Unknown",_hx_index:0,__enum__:"type.Firmware",toString:$estr}
	,QMK: {_hx_name:"QMK",_hx_index:1,__enum__:"type.Firmware",toString:$estr}
	,ZMK: {_hx_name:"ZMK",_hx_index:2,__enum__:"type.Firmware",toString:$estr}
	,KMK: {_hx_name:"KMK",_hx_index:3,__enum__:"type.Firmware",toString:$estr}
	,Custom: {_hx_name:"Custom",_hx_index:4,__enum__:"type.Firmware",toString:$estr}
};
type_Firmware.__constructs__ = [type_Firmware.Unknown,type_Firmware.QMK,type_Firmware.ZMK,type_Firmware.KMK,type_Firmware.Custom];
var type_HotSwap = $hxEnums["type.HotSwap"] = { __ename__:true,__constructs__:null
	,Unspecified: {_hx_name:"Unspecified",_hx_index:0,__enum__:"type.HotSwap",toString:$estr}
	,No: {_hx_name:"No",_hx_index:1,__enum__:"type.HotSwap",toString:$estr}
	,Yes: {_hx_name:"Yes",_hx_index:2,__enum__:"type.HotSwap",toString:$estr}
};
type_HotSwap.__constructs__ = [type_HotSwap.Unspecified,type_HotSwap.No,type_HotSwap.Yes];
var type_KeySpacing = $hxEnums["type.KeySpacing"] = { __ename__:true,__constructs__:null
	,Unknown: {_hx_name:"Unknown",_hx_index:0,__enum__:"type.KeySpacing",toString:$estr}
	,MX: {_hx_name:"MX",_hx_index:1,__enum__:"type.KeySpacing",toString:$estr}
	,MinMX: {_hx_name:"MinMX",_hx_index:2,__enum__:"type.KeySpacing",toString:$estr}
	,Choc: {_hx_name:"Choc",_hx_index:3,__enum__:"type.KeySpacing",toString:$estr}
	,CFX: {_hx_name:"CFX",_hx_index:4,__enum__:"type.KeySpacing",toString:$estr}
	,MinChoc: {_hx_name:"MinChoc",_hx_index:5,__enum__:"type.KeySpacing",toString:$estr}
	,Other: {_hx_name:"Other",_hx_index:6,__enum__:"type.KeySpacing",toString:$estr}
};
type_KeySpacing.__constructs__ = [type_KeySpacing.Unknown,type_KeySpacing.MX,type_KeySpacing.MinMX,type_KeySpacing.Choc,type_KeySpacing.CFX,type_KeySpacing.MinChoc,type_KeySpacing.Other];
var type_NavCluster = $hxEnums["type.NavCluster"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"type.NavCluster",toString:$estr}
	,Arrows: {_hx_name:"Arrows",_hx_index:1,__enum__:"type.NavCluster",toString:$estr}
	,Duo: {_hx_name:"Duo",_hx_index:2,__enum__:"type.NavCluster",toString:$estr}
	,Full: {_hx_name:"Full",_hx_index:3,__enum__:"type.NavCluster",toString:$estr}
};
type_NavCluster.__constructs__ = [type_NavCluster.None,type_NavCluster.Arrows,type_NavCluster.Duo,type_NavCluster.Full];
var type_NumRange = {};
type_NumRange._new = function(min,max) {
	return { min : min, max : max};
};
type_NumRange.fromInt = function(val) {
	return { min : val, max : val};
};
type_NumRange.fromArray = function(arr) {
	if(arr.length != 2) {
		throw haxe_Exception.thrown("Expected [min, max]");
	}
	return { min : arr[0], max : arr[1]};
};
type_NumRange.toString = function(this1) {
	if(this1 == null) {
		return "";
	}
	if(this1.min == this1.max) {
		return "" + Std.string(this1.min);
	}
	return Std.string(this1.min) + ".." + Std.string(this1.max);
};
var type_Shape = $hxEnums["type.Shape"] = { __ename__:true,__constructs__:null
	,Monoblock: {_hx_name:"Monoblock",_hx_index:0,__enum__:"type.Shape",toString:$estr}
	,Unibody: {_hx_name:"Unibody",_hx_index:1,__enum__:"type.Shape",toString:$estr}
	,Split: {_hx_name:"Split",_hx_index:2,__enum__:"type.Shape",toString:$estr}
	,Keywell: {_hx_name:"Keywell",_hx_index:3,__enum__:"type.Shape",toString:$estr}
	,Special: {_hx_name:"Special",_hx_index:4,__enum__:"type.Shape",toString:$estr}
};
type_Shape.__constructs__ = [type_Shape.Monoblock,type_Shape.Unibody,type_Shape.Split,type_Shape.Keywell,type_Shape.Special];
var type_Software = $hxEnums["type.Software"] = { __ename__:true,__constructs__:null
	,Unknown: {_hx_name:"Unknown",_hx_index:0,__enum__:"type.Software",toString:$estr}
	,VIA: {_hx_name:"VIA",_hx_index:1,__enum__:"type.Software",toString:$estr}
	,Vial: {_hx_name:"Vial",_hx_index:2,__enum__:"type.Software",toString:$estr}
	,Custom: {_hx_name:"Custom",_hx_index:3,__enum__:"type.Software",toString:$estr}
};
type_Software.__constructs__ = [type_Software.Unknown,type_Software.VIA,type_Software.Vial,type_Software.Custom];
var type_Splay = {};
type_Splay.fromBool = function(b) {
	if(b) {
		return type_SplayBase.Yes;
	} else {
		return type_SplayBase.No;
	}
};
var type_SplayBase = $hxEnums["type.SplayBase"] = { __ename__:true,__constructs__:null
	,No: {_hx_name:"No",_hx_index:0,__enum__:"type.SplayBase",toString:$estr}
	,Yes: {_hx_name:"Yes",_hx_index:1,__enum__:"type.SplayBase",toString:$estr}
	,PinkyOnly: {_hx_name:"PinkyOnly",_hx_index:2,__enum__:"type.SplayBase",toString:$estr}
	,Optional: {_hx_name:"Optional",_hx_index:3,__enum__:"type.SplayBase",toString:$estr}
};
type_SplayBase.__constructs__ = [type_SplayBase.No,type_SplayBase.Yes,type_SplayBase.PinkyOnly,type_SplayBase.Optional];
var type_StaggerType = $hxEnums["type.StaggerType"] = { __ename__:true,__constructs__:null
	,Column: {_hx_name:"Column",_hx_index:0,__enum__:"type.StaggerType",toString:$estr}
	,Ortho: {_hx_name:"Ortho",_hx_index:1,__enum__:"type.StaggerType",toString:$estr}
};
type_StaggerType.__constructs__ = [type_StaggerType.Column,type_StaggerType.Ortho];
var type_SwitchKind = $hxEnums["type.SwitchKind"] = { __ename__:true,__constructs__:null
	,Linear: {_hx_name:"Linear",_hx_index:0,__enum__:"type.SwitchKind",toString:$estr}
	,Tactile: {_hx_name:"Tactile",_hx_index:1,__enum__:"type.SwitchKind",toString:$estr}
	,Clicky: {_hx_name:"Clicky",_hx_index:2,__enum__:"type.SwitchKind",toString:$estr}
	,Other: {_hx_name:"Other",_hx_index:3,__enum__:"type.SwitchKind",toString:$estr}
};
type_SwitchKind.__constructs__ = [type_SwitchKind.Linear,type_SwitchKind.Tactile,type_SwitchKind.Clicky,type_SwitchKind.Other];
var type_SwitchProfile = $hxEnums["type.SwitchProfile"] = { __ename__:true,__constructs__:null
	,Unknown: {_hx_name:"Unknown",_hx_index:0,__enum__:"type.SwitchProfile",toString:$estr}
	,MX: {_hx_name:"MX",_hx_index:1,__enum__:"type.SwitchProfile",toString:$estr}
	,Choc: {_hx_name:"Choc",_hx_index:2,__enum__:"type.SwitchProfile",toString:$estr}
	,ChocV2: {_hx_name:"ChocV2",_hx_index:3,__enum__:"type.SwitchProfile",toString:$estr}
	,Alps: {_hx_name:"Alps",_hx_index:4,__enum__:"type.SwitchProfile",toString:$estr}
	,GateronLP: {_hx_name:"GateronLP",_hx_index:5,__enum__:"type.SwitchProfile",toString:$estr}
	,OutemuLP: {_hx_name:"OutemuLP",_hx_index:6,__enum__:"type.SwitchProfile",toString:$estr}
	,CherryULP: {_hx_name:"CherryULP",_hx_index:7,__enum__:"type.SwitchProfile",toString:$estr}
	,Optical: {_hx_name:"Optical",_hx_index:8,__enum__:"type.SwitchProfile",toString:$estr}
	,Other: {_hx_name:"Other",_hx_index:9,__enum__:"type.SwitchProfile",toString:$estr}
};
type_SwitchProfile.__constructs__ = [type_SwitchProfile.Unknown,type_SwitchProfile.MX,type_SwitchProfile.Choc,type_SwitchProfile.ChocV2,type_SwitchProfile.Alps,type_SwitchProfile.GateronLP,type_SwitchProfile.OutemuLP,type_SwitchProfile.CherryULP,type_SwitchProfile.Optical,type_SwitchProfile.Other];
var type_ValList = {};
type_ValList.get_length = function(this1) {
	return this1.length;
};
type_ValList.aget = function(this1,i) {
	return this1[i];
};
type_ValList.aset = function(this1,i,v) {
	return this1[i] = v;
};
type_ValList.fromValue = function(val) {
	if(val == null) {
		return [];
	}
	return [val];
};
var type_WristPads = $hxEnums["type.WristPads"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"type.WristPads",toString:$estr}
	,Integrated: {_hx_name:"Integrated",_hx_index:1,__enum__:"type.WristPads",toString:$estr}
	,Detachable: {_hx_name:"Detachable",_hx_index:2,__enum__:"type.WristPads",toString:$estr}
};
type_WristPads.__constructs__ = [type_WristPads.None,type_WristPads.Integrated,type_WristPads.Detachable];
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
var Tippy = window["tippy"];
js_Boot.__toStr = ({ }).toString;
Main.baseURL = "https://yal-tools.github.io/ergo-keyboards/";
table_LinkListColumn.domainCountries = { };
table_LinkListColumn.countryTags = { };
table_LinkListColumn.rxFlag = new RegExp("\\[flag:\\s*(\\w+)(?:\\|(.+?))\\]","g");
table_LinkListColumn.rxAt = new RegExp("(.+?)\\s*@\\s*(https?://.+)");
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
